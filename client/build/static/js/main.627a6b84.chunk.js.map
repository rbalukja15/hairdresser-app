{"version":3,"sources":["actions/errorActions.js","actions/types.js","actions/authActions.js","components/auth/LoginModal.js","components/auth/Logout.js","components/navigation/AppNavMaterial.js","reducers/items/itemReducer.js","reducers/errors/errorReducer.js","reducers/auth/authReducer.js","reducers/clients/clientReducer.js","reducers/categories/categoryReducer.js","reducers/sales/saleReducer.js","reducers/buyings/buyingReducer.js","reducers/employees/employeeReducer.js","reducers/events/eventReducer.js","reducers/index.js","store.js","actions/categoryActions.js","components/category/Category.js","components/modals/category/categoryModal.js","components/category/categories_component.js","actions/itemActions.js","components/items/ShoppingList.js","components/modals/Item/ItemModel.js","components/items/itemShopping.js","actions/eventActions.js","components/modals/event/eventModal.js","components/Home.js","actions/clientActions.js","components/clients/ClientList.js","components/modals/client/clientModel.js","components/clients/client_component.js","actions/saleActions.js","components/sales/Sale.js","components/modals/sale/saleModal.js","components/sales/sales_component.js","actions/buyingActions.js","components/modals/buying/buyingModal.js","components/buyings/Buying.js","components/buyings/buyings_component.js","actions/employeeActions.js","components/employees/Employee.js","components/modals/employee/addEmployeeModal.js","components/employees/employees_component.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","type","payload","id","arguments","length","undefined","tokenConfig","getState","token","auth","config","headers","Content-type","LoginModal","state","modal","email","password","toggle","_this","props","clearErrors","setState","onChange","e","Object","defineProperty","target","name","value","onSubmit","preventDefault","_this$state","user","login","prevProps","_this$props","this","error","isAuthenticated","react_default","a","createElement","NavLink","onClick","href","Modal","isOpen","centered","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","style","marginTop","block","Component","connect","_ref2","dispatch","body","JSON","stringify","axios","post","Content-Type","then","res","data","catch","err","response","Logout","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","react","logout","HomeIcon","SvgIcon","d","ResponsiveDrawer","mobileOpen","handleDrawerToggle","dumbFunction","classes","pathname","location","drawer","Hidden","smDown","implementation","toolbar","MenuList","MenuItem","component","Link","to","selected","iconHover","fontSize","float","auth_LoginModal","auth_Logout","CssBaseline","root","AppBar","position","appBar","Toolbar","IconButton","aria-label","menuButton","Menu_default","Typography","variant","noWrap","typography","smUp","Drawer","container","open","onClose","paper","drawerPaper","xsDown","content","children","compose","withRouter","withStyles","theme","_menuButton","_content","breakpoints","up","width","flexShrink","zIndex","marginRight","display","icon","margin","spacing","&:hover","red","mixins","marginLeft","drawerWidth","concat","height","borderRadius","avatar","withTheme","initialState","items","loading","localStorage","getItem","isLoading","clients","categories","sales","buyings","employees","events","combineReducers","item","action","objectSpread","filter","_id","toConsumableArray","client","setItem","removeItem","category","sale","buying","employee","event","toastr","toastrReducer","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","rootReducer","applyMiddleware","getCategories","setCategoriesLoading","get","toastrConfirmOptions","onOk","onCancel","console","log","Category","editModal","counter","editCategory","onDeleteClick","confirm","deleteCategory","success","toggleEdit","_refreshCategories","updateCategory","componentWillMount","_this2","map","_ref","date","push","moment","format","outline","size","bind","marginBottom","ModalFooter","dist_default","title","columns","options","filterType","responsive","selectableRows","isRowSelectable","dataIndex","delete","getCategoryById","put","CategoryModal","newCategory","addCategory","containerStyle","category_component","Container","categoryModal","category_Category","setItemsLoading","select_values","ShoppingList","editItem","kodi","cmimBlerje","prodhuesi","shitesi","deleteItem","handleChange","_refreshItems","updateItem","getItems","slice","label","calendar","required","react_select_browser_esm","autoFocus","simpleValue","cat","getItemById","ItemModal","newItem","addItem","itemShopping","ItemModel","items_ShoppingList","getEvents","setEventsLoading","addEvent","_React$useState","React","useState","Date","now","_React$useState2","slicedToArray","selectedStartDate","setSelectedStartDate","_React$useState3","_React$useState4","selectedEndDate","setSelectedEndDate","_React$useState5","_React$useState6","setModal","_React$useState7","_React$useState8","setTitle","_React$useState9","_React$useState10","startDate","setStartDate","_React$useState11","_React$useState12","endDate","setEndDate","handleStartDateChange","handleEndDateChange","newEvent","reload","useUtils_cfb96ac9","utils","DateFnsUtils","Grid","DatePicker","KeyboardButtonProps","TimePicker","ampm","buttons","text","handler","cancel","disableCancel","localizer","momentLocalizer","Home","start","end","callBackFunction","handleEventClick","deleteEvent","_refreshEvents","myEventsList","eventModal","react_big_calendar_esm","popup","onSelectEvent","startAccessor","endAccessor","defaultView","getEventById","updateEvent","setClientsLoading","ClientList","editClient","surname","deleteClient","_refreshClients","updateClient","getClients","getClientById","ClientModal","newClient","addClient","client_component","clientModel","clients_ClientList","setSalesLoading","Sale","editSale","clientName","clientSurname","productName","sasia","cmimi","deleteSale","_refreshSales","updateSale","getSales","getSaleById","SaleModal","hasError","newSale","addSale","info","sale_component","saleModal","sales_Sale","setBuyingsLoading","BuyingModal","newBuying","addBuying","Buying","editBuying","deleteBuying","_refreshBuyings","updateBuying","getBuyings","getBuyingById","buyingModal","buyings_Buying","setEmployeesLoading","Employee","editEmployee","numerSigurime","pozicioni","adresa","paga","deleteEmployee","updateEmployee","getEmployees","getEmployeeById","EmployeeModal","newEmployee","addEmployee","addEmployeeModal","employees_Employee","App","es","react_router_dom","AppNavMaterial","lib_default","timeOut","newestOnTop","preventDuplicates","transitionIn","transitionOut","progressBar","closeOnToastrClick","react_router","exact","path","sales_component","buyings_component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.627a6b84.chunk.js","sourcesContent":["import { GET_ERRORS, CLEAR_ERRORS } from './types';\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status, id = null) => {\n  return {\n    type: GET_ERRORS,\n    payload: { msg, status, id }\n  };\n};\n\n// CLEAR ERRORS\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};","//Variables that are set to strings for export\nexport const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEMS';\nexport const DELETE_ITEM = 'DELETE_ITEMS';\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\nexport const GET_ITEM_BY_ID = 'GET_ITEM_BY_ID';\nexport const UPDATE_ITEM = 'UPDATE_ITEM';\n\n//Client Actions\nexport const GET_CLIENTS = 'GET_CLIENTS';\nexport const ADD_CLIENT = 'ADD_CLIENTS';\nexport const DELETE_CLIENT = 'DELETE_CLIENTS';\nexport const CLIENTS_LOADING = 'CLIENTS_LOADING';\nexport const GET_CLIENT_BY_ID = 'GET_CLIENT_BY_ID';\nexport const UPDATE_CLIENT = 'UPDATE_CLIENT';\n\n//Category Actions\nexport const GET_CATEGORIES = 'GET_CATEGORIES';\nexport const ADD_CATEGORY = 'ADD_CATEGORIES';\nexport const DELETE_CATEGORY = 'DELETE_CATEGORIES';\nexport const CATEGORIES_LOADING = 'CATEGORIES_LOADING';\nexport const GET_CATEGORY_BY_ID = 'GET_CATEGORY_BY_ID';\nexport const UPDATE_CATEGORY = 'UPDATE_CATEGORY';\n\n//Sales Actions\nexport const GET_SALES = 'GET_SALES';\nexport const ADD_SALE = 'ADD_SALES';\nexport const DELETE_SALE = 'DELETE_SALES';\nexport const SALES_LOADING = 'SALES_LOADING';\nexport const GET_SALE_BY_ID = 'GET_SALE_BY_ID';\nexport const UPDATE_SALE = 'UPDATE_SALE';\n\n//Buying Actions\nexport const GET_BUYINGS = 'GET_BUYINGS';\nexport const ADD_BUYING = 'ADD_BUYINGS';\nexport const DELETE_BUYING = 'DELETE_BUYING';\nexport const BUYINGS_LOADING = 'BUYINGS_LOADING';\nexport const GET_BUYING_BY_ID = 'GET_BUYING_BY_ID';\nexport const UPDATE_BUYING = 'UPDATE_BUYING';\n\n//Employee Actions\nexport const GET_EMPLOYEES = 'GET_EMPLOYEES';\nexport const ADD_EMPLOYEE = 'ADD_EMPLOYEES';\nexport const DELETE_EMPLOYEE = 'DELETE_EMPLOYEE';\nexport const EMPLOYEES_LOADING = 'EMPLOYEES_LOADING';\nexport const GET_EMPLOYEE_BY_ID = 'GET_EMPLOYEE_BY_ID';\nexport const UPDATE_EMPLOYEE = 'UPDATE_EMPLOYEE';\n\n//Employee Actions\nexport const GET_EVENTS = 'GET_EVENTS';\nexport const ADD_EVENT = 'ADD_EVENTS';\nexport const DELETE_EVENT = 'DELETE_EVENT';\nexport const EVENTS_LOADING = 'EVENTS_LOADING';\nexport const GET_EVENT_BY_ID = 'GET_EVENT_BY_ID';\nexport const UPDATE_EVENT = 'UPDATE_EVENT';\n\n//Auth Types\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\n\n//Error types\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';","import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get('/api/auth/user', tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n// Register User\nexport const register = ({ name, email, password }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // Request body\n  const body = JSON.stringify({ name, email, password });\n\n  axios\n    .post('/api/users', body, config)\n    .then(res =>\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\n      );\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n};\n\n// Login User\nexport const login = ({ email, password }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // Request body\n  const body = JSON.stringify({ email, password });\n\n  axios\n    .post('/api/auth', body, config)\n    .then(res =>\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      })\n    )\n    .catch(err => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\n      );\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n};\n\n// Logout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  // If token, add to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}; ","import React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  NavLink,\n  Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass LoginModal extends Component {\n  state = {\n    modal: false,\n    email: '',\n    password: '',\n    msg: null\n  };\n\n  static propTypes = {\n    isAuthenticated: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    login: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n  };\n\n  componentDidUpdate(prevProps) {\n    const { error, isAuthenticated } = this.props;\n    if (error !== prevProps.error) {\n      // Check for register error\n      if (error.id === 'LOGIN_FAIL') {\n        this.setState({ msg: error.msg.msg });\n      } else {\n        this.setState({ msg: null });\n      }\n    }\n\n    // If authenticated, close modal\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  toggle = () => {\n    // Clear errors\n    this.props.clearErrors();\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const { email, password } = this.state;\n\n    const user = {\n      email,\n      password\n    };\n\n    // Attempt to login\n    this.props.login(user);\n  };\n\n  render() {\n    return (\n      <div>\n        <NavLink onClick={this.toggle} href='#'>\n          Login\n        </NavLink>\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle}>Login</ModalHeader>\n          <ModalBody>\n            {this.state.msg ? (\n              <Alert color='danger'>{this.state.msg}</Alert>\n            ) : null}\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for='email'>Email</Label>\n                <Input\n                  type='email'\n                  name='email'\n                  id='email'\n                  placeholder='Email'\n                  className='mb-3'\n                  onChange={this.onChange}\n                />\n\n                <Label for='password'>Password</Label>\n                <Input\n                  type='password'\n                  name='password'\n                  id='password'\n                  placeholder='Password'\n                  className='mb-3'\n                  onChange={this.onChange}\n                />\n                <Button color='dark' style={{ marginTop: '2rem' }} block>\n                  Login\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(\n  mapStateToProps,\n  { login, clearErrors }\n)(LoginModal);","import React, { Component, Fragment } from 'react';\nimport { NavLink } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/authActions';\nimport PropTypes from 'prop-types';\n\nexport class Logout extends Component {\n  static propTypes = {\n    logout: PropTypes.func.isRequired\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <NavLink onClick={this.props.logout} href='#'>\n          Logout\n        </NavLink>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { logout }\n)(Logout);","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\nimport red from \"@material-ui/core/colors/red\";\n\n//Authentication Modals\nimport LoginModal from \"../auth/LoginModal\";\nimport Logout from \"../auth/Logout\"; //\n\nconst drawerWidth = 240;\nconst contentHeight = 1000;\n\n//Styled Classes\nconst styles = theme => ({\n  root: {\n    //display: \"flex\",\n    //alignItems: \"flex-end\"\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    //alignItems: \"flex\",\n  },\n  menuButton: {\n    marginRight: 20,\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\"\n    },\n    float: \"left\",\n  },\n  icon: {\n    margin: theme.spacing(2)\n  },\n  iconHover: {\n    margin: theme.spacing(2),\n    \"&:hover\": {\n      color: red[800]\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: drawerWidth + 10,\n      marginTop: 5,\n      width: `calc(100% - ${drawerWidth}px - 10px)`,\n      height: \"100%\"\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      marginTop: 10,\n      width: `calc(100% - ${drawerWidth}px - 20px)`,\n      height: contentHeight\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      marginTop: 10,\n      width: `calc(100% - ${drawerWidth}px - 20px)`,\n      height: `${contentHeight}px + 200px`\n    }\n  },\n  auth: {\n    //backgroundColor: grey[400],\n    borderRadius: 7\n  }\n  ,\n  avatar: {\n    float: 'right',\n    marginRight: 0\n  },\n  typography: {\n    float: \"left\",\n  }\n});\n\n//Create the home icon svg\nfunction HomeIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n    </SvgIcon>\n  );\n}\n\nclass ResponsiveDrawer extends Component {\n  state = {\n    mobileOpen: false\n  };\n\n  static propTypes = {\n    //auth: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired,\n    // Injected by the documentation to work in an iframe.\n    // You won't need it on your project.\n    container: PropTypes.object,\n    theme: PropTypes.object.isRequired\n  };\n\n  handleDrawerToggle = () => {\n    this.setState(state => ({ mobileOpen: !state.mobileOpen }));\n  };\n\n  //To avoid passing string in the function onClick\n  dumbFunction = () => {\n\n  }\n\n  render() {\n    const {\n      classes,\n      //children,\n      location: { pathname }\n    } = this.props;\n\n    const drawer = (\n      <div>\n        <Hidden smDown implementation=\"css\">\n          <div className={classes.toolbar} />\n        </Hidden>\n        <MenuList>\n          <MenuItem\n            component={Link}\n            to=\"/\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/\" === pathname}\n          >\n            Kryefaqja{\" \"}\n            <HomeIcon\n              className={classes.iconHover}\n              color=\"error\"\n              style={{ fontSize: 30, float: \"right\" }}\n            />\n          </MenuItem>\n          <MenuItem\n            component={Link}\n            to=\"/sales\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/sales\" === pathname}\n          >\n            Shitjet\n          </MenuItem>\n          <MenuItem\n            component={Link}\n            to=\"/buyings\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/buyings\" === pathname}\n          >\n            Blerjet\n          </MenuItem>\n          <MenuItem\n            component={Link}\n            to=\"/shopping\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/shopping\" === pathname}\n          >\n            Produktet\n          </MenuItem>\n          <MenuItem\n            component={Link}\n            to=\"/category\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/category\" === pathname}\n          >\n            Kategorite\n          </MenuItem>\n          <MenuItem\n            component={Link}\n            to=\"/clients\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/clients\" === pathname}\n          >\n            Klientet\n          </MenuItem>\n          <MenuItem\n            component={Link}\n            to=\"/employees\"\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            selected={\"/employees\" === pathname}\n          >\n            Punetoret\n          </MenuItem>\n          <MenuItem\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            className={classes.auth}\n          >\n            <LoginModal />\n          </MenuItem>\n          <MenuItem\n            onClick={this.state.mobileOpen ? this.handleDrawerToggle : this.dumbFunction}\n            className={classes.auth}\n          >\n            <Logout />\n          </MenuItem>\n        </MenuList>\n      </div>\n    );\n\n    return (\n      <Fragment>\n        <CssBaseline />\n        <div className={classes.root}>\n          <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"Open drawer\"\n                onClick={this.handleDrawerToggle}\n                className={classes.menuButton}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.typography}>\n                C'est Chic Saloon\n              </Typography>\n              {/* <div  className={classes.avatar}>\n                <LetterAvatars/>\n              </div> */}\n            </Toolbar>\n          </AppBar>\n          <nav className={classes.drawer}>\n            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n\n            <Hidden smUp implementation=\"css\">\n              <Drawer\n                container={this.props.container}\n                variant=\"temporary\"\n                open={this.state.mobileOpen}\n                onClose={this.handleDrawerToggle}\n                classes={{\n                  paper: classes.drawerPaper\n                }}\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n            <Hidden xsDown implementation=\"css\">\n              <Drawer\n                classes={{\n                  paper: classes.drawerPaper\n                }}\n                variant=\"permanent\"\n                open\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n          </nav>\n          <main className={classes.content}>\n            <div className={classes.toolbar} />\n            {this.props.children}\n          </main>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  withStyles(styles, { withTheme: true })\n)(ResponsiveDrawer);\n","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n \nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING, GET_ITEM_BY_ID, UPDATE_ITEM  } from '../../actions/types';\n\nconst initialState = {\n  items: [],\n  loading: false //Used when we fetch the data\n}\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch(action.type) {\n    //Check for get action\n    case GET_ITEMS:\n      return {\n        ...state, //Get the copy of the state\n        items: action.payload, //Add the values into the items array\n        loading: false //After getting the data, send the loading back to false\n      }\n    \n    //Check for get by id action\n    case GET_ITEM_BY_ID:\n      return {\n        ...state,\n        item: action.payload\n      }\n    //Check for delete action\n    case DELETE_ITEM:\n      return {\n        ...state,\n        items: state.items.filter(item => item._id !== action.payload)\n      }\n    \n    //Check for the item action\n    case ADD_ITEM:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        items: [action.payload, ...state.items]\n      }\n\n    //Check for the edit action\n    case UPDATE_ITEM:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        items: [action.payload, ...state.items]\n      }\n\n    //Check if we are fetching data\n    case ITEMS_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      }\n\n    default:\n      return state;\n  }\n}","import { GET_ERRORS, CLEAR_ERRORS } from \"../../actions/types\";\n\nconst initialState = {\n  msg: {},\n  status: null,\n  id: null\n};\n\n//Check for the type of the action, and do the specified requirements from the action\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return {\n        msg: action.payload.msg,\n        status: action.payload.status,\n        id: action.payload.id\n      };\n\n    case CLEAR_ERRORS:\n      return {\n        msg: {},\n        status: null,\n        id: null\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"../../actions/types\";\n\n//Set the initial state\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null\n};\n\n//Export the function, decide the type of the action\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case USER_LOADING:\n      return {\n        //Fetch the state and set to loading\n        ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return {\n        //If the user has loaded set to is authenticated, loading finished; Get the user from the payload\n        ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n\n        //Since we are also getting the token, we send the whole payload\n        ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n      localStorage.removeItem(\"token\");\n      return {\n        //Remove everything\n        ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n    default:\n      return state; \n  }\n}\n","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n\nimport {\n  GET_CLIENTS,\n  ADD_CLIENT,\n  DELETE_CLIENT,\n  CLIENTS_LOADING,\n  GET_CLIENT_BY_ID,\n  UPDATE_CLIENT\n} from \"../../actions/types\";\n\nconst initialState = {\n  clients: [],\n  loading: false //Used when we fetch the data\n};\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch (action.type) {\n    //Check for get action\n    case GET_CLIENTS:\n      return {\n        ...state, //Get the copy of the state\n        clients: action.payload, //Add the values into the items array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    case GET_CLIENT_BY_ID:\n      return {\n        ...state,\n        client: action.payload,\n        loading: false\n      }\n\n    //Check for delete action\n    case DELETE_CLIENT:\n      return {\n        ...state,\n        clients: state.clients.filter(client => client._id !== action.payload)\n      };\n\n    //Check for the add action\n    case ADD_CLIENT:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        clients: [action.payload, ...state.clients]\n      };\n\n    //Check for update action\n    case UPDATE_CLIENT:\n      return {\n        ...state,\n        clients: [action.payload, ...state.clients]\n      }\n\n    //Check if we are fetching data\n    case CLIENTS_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      };\n\n    default:\n      return state;\n  }\n}\n","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n\nimport {\n  GET_CATEGORIES,\n  ADD_CATEGORY,\n  DELETE_CATEGORY,\n  CATEGORIES_LOADING,\n  GET_CATEGORY_BY_ID,\n  UPDATE_CATEGORY\n} from \"../../actions/types\";\n\nconst initialState = {\n  categories: [],\n  loading: false //Used when we fetch the data\n};\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch (action.type) {\n    //Check for get action\n    case GET_CATEGORIES:\n      return {\n        ...state, //Get the copy of the state\n        categories: action.payload, //Add the values into the items array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for get by id action\n    case GET_CATEGORY_BY_ID:\n      return {\n        ...state, //Get the copy of the state\n        category: action.payload, //Add the values into the items array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for delete action\n    case DELETE_CATEGORY:\n      return {\n        ...state,\n        categories: state.categories.filter(\n          category => category._id !== action.payload\n        )\n      };\n\n    //Check for the add action\n    case ADD_CATEGORY:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        categories: [action.payload, ...state.categories]\n      };\n\n    //Check for the item action\n    case UPDATE_CATEGORY:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        categories: [action.payload, ...state.categories]\n      };\n\n    //Check if we are fetching data\n    case CATEGORIES_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      };\n\n    default:\n      return state;\n  }\n}\n","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n\nimport {\n  GET_SALES,\n  ADD_SALE,\n  DELETE_SALE,\n  SALES_LOADING,\n  GET_SALE_BY_ID,\n  UPDATE_SALE\n} from \"../../actions/types\";\n\nconst initialState = {\n  sales: [],\n  loading: false //Used when we fetch the data\n};\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch (action.type) {\n    //Check for get action\n    case GET_SALES:\n      return {\n        ...state, //Get the copy of the state\n        sales: action.payload, //Add the values into the items array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for get by id action\n    case GET_SALE_BY_ID:\n      return {\n        ...state,\n        sale: action.payload\n      };\n\n    //Check for delete action\n    case DELETE_SALE:\n      return {\n        ...state,\n        sales: state.sales.filter(sale => sale._id !== action.payload)\n      };\n\n    //Check for the item action\n    case ADD_SALE:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        sales: [action.payload, ...state.sales]\n      };\n\n    //Check for the edit action\n    case UPDATE_SALE:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        sales: [action.payload, ...state.sales]\n      };\n\n    //Check if we are fetching data\n    case SALES_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      };\n\n    default:\n      return state;\n  }\n}\n","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n\nimport {\n  GET_BUYINGS,\n  ADD_BUYING,\n  DELETE_BUYING,\n  BUYINGS_LOADING,\n  GET_BUYING_BY_ID,\n  UPDATE_BUYING\n} from \"../../actions/types\";\n\nconst initialState = {\n  buyings: [],\n  loading: false //Used when we fetch the data\n};\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch (action.type) {\n    //Check for get action\n    case GET_BUYINGS:\n      return {\n        ...state, //Get the copy of the state\n        buyings: action.payload, //Add the values into the buyings array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for get by id action\n    case GET_BUYING_BY_ID:\n      return {\n        ...state, //Get the copy of the state\n        buying: action.payload, //Add the values into the buyings array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for delete action\n    case DELETE_BUYING:\n      return {\n        ...state,\n        buyings: state.buyings.filter(buying => buying._id !== action.payload)\n      };\n\n    //Check for the add action\n    case ADD_BUYING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        buyings: [action.payload, ...state.buyings]\n      };\n\n    //Check for the edit action\n    case UPDATE_BUYING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        buyings: [action.payload, ...state.buyings]\n      };\n\n    //Check if we are fetching data\n    case BUYINGS_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      };\n\n    default:\n      return state;\n  }\n}\n","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n \nimport { GET_EMPLOYEES, ADD_EMPLOYEE, DELETE_EMPLOYEE, EMPLOYEES_LOADING, GET_EMPLOYEE_BY_ID, UPDATE_EMPLOYEE  } from '../../actions/types';\n\nconst initialState = {\n  employees: [],\n  loading: false //Used when we fetch the data\n}\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch(action.type) {\n    //Check for get action\n    case GET_EMPLOYEES:\n      return {\n        ...state, //Get the copy of the state\n        employees: action.payload, //Add the values into the employees array\n        loading: false //After getting the data, send the loading back to false\n      }\n    \n    //Check for get by id action\n    case GET_EMPLOYEE_BY_ID:\n      return {\n        ...state,\n        employee: action.payload\n      }\n    //Check for delete action\n    case DELETE_EMPLOYEE:\n      return {\n        ...state,\n        employees: state.employees.filter(employee => employee._id !== action.payload)\n      }\n    \n    //Check for the employee action\n    case ADD_EMPLOYEE:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        employees: [action.payload, ...state.employees]\n      }\n\n    //Check for the edit action\n    case UPDATE_EMPLOYEE:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        employees: [action.payload, ...state.employees]\n      }\n\n    //Check if we are fetching data\n    case EMPLOYEES_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      }\n\n    default:\n      return state;\n  }\n}","//Reducer is where our actual state is going to go\n//Here we check our actions that are dispatched\n//Data from server are fetched and we add it to our component using the reducer\n\nimport {\n  GET_EVENTS,\n  ADD_EVENT,\n  DELETE_EVENT,\n  EVENTS_LOADING,\n  GET_EVENT_BY_ID,\n  UPDATE_EVENT\n} from \"../../actions/types\";\n\nconst initialState = {\n  events: [],\n  loading: false //Used when we fetch the data\n};\n\nexport default function(state = initialState, action) {\n  //decide what to do\n  switch (action.type) {\n    //Check for get action\n    case GET_EVENTS:\n      return {\n        ...state, //Get the copy of the state\n        events: action.payload, //Add the values into the buyings array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for get by id action\n    case GET_EVENT_BY_ID:\n      return {\n        ...state, //Get the copy of the state\n        event: action.payload, //Add the values into the buyings array\n        loading: false //After getting the data, send the loading back to false\n      };\n\n    //Check for delete action\n    case DELETE_EVENT:\n      return {\n        ...state,\n        events: state.events.filter(event => event._id !== action.payload)\n      };\n\n    //Check for the add action\n    case ADD_EVENT:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        events: [action.payload, ...state.events]\n      };\n\n    //Check for the edit action\n    case UPDATE_EVENT:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        events: [action.payload, ...state.events]\n      };\n\n    //Check if we are fetching data\n    case EVENTS_LOADING:\n      return {\n        //Why we use ...state is that we cannot directly change the state\n        //We make a copy of it and add to it\n        ...state,\n        loading: true //If yes, change the state of loading\n      };\n\n    default:\n      return state;\n  }\n}\n","//The main point of this reducer is to bring together all the other reducers\nimport { combineReducers } from 'redux';\nimport itemReducer from './items/itemReducer';\nimport errorReducer from './errors/errorReducer';\nimport authReducer from './auth/authReducer';\nimport clientReducer from './clients/clientReducer';\nimport categoryReducer from './categories/categoryReducer';\nimport saleReducer from './sales/saleReducer';\nimport buyingReducer from './buyings/buyingReducer';\nimport employeeReducer from './employees/employeeReducer';\nimport eventReducer from './events/eventReducer';\nimport {reducer as toastrReducer} from 'react-redux-toastr';\n\nexport default combineReducers({\n  item: itemReducer,\n  client: clientReducer,\n  error: errorReducer,\n  auth: authReducer,\n  category: categoryReducer,\n  sale: saleReducer,\n  buying: buyingReducer,\n  employee: employeeReducer,\n  event: eventReducer,\n  toastr: toastrReducer\n});","import { createStore, applyMiddleware, compose } from 'redux'; \nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\n//Client need to install the redux devtools on chrome for it to work\n//this can be done instead: window._REDUX_DEVTOOLS_EXTENSION_ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n  applyMiddleware(...middleware)\n));\n\nexport default store;","//Define item actions\nimport {\n  GET_CATEGORIES,\n  ADD_CATEGORY,\n  DELETE_CATEGORY,\n  CATEGORIES_LOADING,\n  GET_CATEGORY_BY_ID,\n  UPDATE_CATEGORY\n} from \"./types\";\n\n//Http Client\nimport axios from \"axios\";\n\n//Import the token helper action to be able to add CATEGORIES\nimport { tokenConfig } from \"./authActions\";\n\n//To be able to return errors\nimport {\n  // errors, \n  returnErrors\n} from \"./errorActions\";\n\n//Action to get the CATEGORIES into the component\nexport const getCategories = () => dispatch => {\n  dispatch(setCategoriesLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/category\")\n    .then(res =>\n      dispatch({\n        type: GET_CATEGORIES, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get a sale by id into the components\nexport const getCategoryById = id => dispatch => {\n  axios\n    .get(`/api/category/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_CATEGORY_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to add a category\nexport const addCategory = category => (dispatch, getState) => {\n  axios\n    .post(\"/api/category\", category, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_CATEGORY, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to delete a category\nexport const deleteCategory = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/category/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_CATEGORY, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update a SALE\nexport const updateCategory = category => (dispatch, getState) => {\n  axios\n    .put(`/api/category/${category._id}`, category, tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: UPDATE_CATEGORY,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Dispatch Items Loading\nexport const setCategoriesLoading = () => {\n  return {\n    type: CATEGORIES_LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //Allows to get state from redux to react component\nimport {\n  getCategories,\n  deleteCategory,\n  getCategoryById,\n  updateCategory\n} from \"../../actions/categoryActions\"; //Import the actions\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\n\n//Material-UI Part\nimport MUIDataTable from \"mui-datatables\";\n\nimport moment from \"moment\"; //Moment library for date editting\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n//\n//THE WAY REDUX WORKS\n//CARS => COMPONENT->ACTION->REDUCER->STORE\n\n//Toastr confirm options\nconst toastrConfirmOptions = {\n  onOk: () => {},\n  onCancel: () => {\n    console.log(\"CANCEL: clicked\");\n    return;\n  }\n};\n\nclass Category extends Component {\n\n  state = {\n    editModal: false,\n    counter: 1,\n    editCategory: {\n      _id: \"\",\n      name: \"\"\n    }\n  };\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getCategories: PropTypes.func.isRequired,\n    getCategoryById: PropTypes.func.isRequired,\n    updateCategory: PropTypes.func.isRequired,\n    category: PropTypes.object.isRequired, //Represents our state\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshCategories();\n  }\n\n  //Call the delete action\n  onDeleteClick = id => {\n    toastr.confirm(\"Je e sigurte ?\", toastrConfirmOptions);\n    toastrConfirmOptions.onOk = () => {\n      this.props.deleteCategory(id);\n      console.log(\"Category Deleted\");\n      toastr.success(\"Kategoria u fshi me sukses\");\n    };\n  };\n\n  //Call the update function\n  updateCategory() {\n\n    //Call the update action and pass the item state\n    this.props.updateCategory(this.state.editCategory);\n\n    //Refresh the data\n    this._refreshCategories();\n\n    this.componentWillMount();\n\n    toastr.success(\n      \"Modifikim\",\n      `Kategoria ${this.state.editCategory.name} u modifikua me sukses`\n    );\n\n    //Reset the state\n    this.setState({\n      editModal: false,\n      counter: 1,\n      editCategory: {\n        _id: \"\",\n        name: \"\"\n    }\n    });\n  }\n\n  //Refresh function for the datas in the table\n  _refreshCategories() {\n    this.props.getCategories();\n  }\n\n  //Edit function to get the data from the table row into the state\n  editCategory(_id, name) {\n    this.setState({\n      editCategory: {\n        _id,\n        name\n      },\n      editModal: !this.state.editModal\n    });\n  }\n\n  //Toggle the edit modal function\n  toggleEdit = () => {\n    this.setState({\n      editModal: !this.state.editModal\n    });\n  };\n\n  render() {\n    const { categories } = this.props.category; //Pull the items\n    const columns = [\"Nr\", \"Emri\", \"Data Regjistrimit\", \"Fshi/Modifiko\"];\n    const data = [];\n\n    let counter = this.state.counter;\n\n      categories.map(({ _id, name, date }) =>\n        data.push([\n          counter++,\n          name,\n          moment(date).format(\"DD-MM-YYYY\"),\n          <div>\n            <Button\n              className=\"remove-btn \"\n              outline\n              color=\"danger\"\n              size=\"sm\"\n              onClick={this.onDeleteClick.bind(this, _id)}\n            >\n              Fshi\n            </Button>\n            <Button\n              className=\"edit-btn\"\n              outline\n              color=\"warning\"\n              size=\"sm\"\n              onClick={this.editCategory.bind(this, _id, name)}\n            >\n              Modifiko\n            </Button>\n          </div>\n        ])\n      );\n\n    const options = {\n      filterType: \"dropdown\",\n      responsive: \"scroll\",\n      selectableRows: \"none\",\n      isRowSelectable: function(dataIndex) {\n        return false;\n      }\n    };\n\n    return (\n      <div>\n        {/* Edit Modal Part */}\n        <Modal\n          isOpen={this.state.editModal}\n          toggle={this.toggleEdit.bind(this)}\n          centered={true}\n        >\n          <ModalHeader toggle={this.toggleEdit.bind(this)}>\n            Modifiko kategorite\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"item\">Emri Kategorise</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"item\"\n                  value={this.state.editCategory.name}\n                  onChange={e => {\n                    let { editCategory } = this.state;\n                    editCategory.name = e.target.value;\n                    this.setState({ editCategory });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"info\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.updateCategory.bind(this)}\n            >\n              Modifiko Kategori\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.toggleEdit.bind(this)}\n            >\n              Mbyll\n            </Button>\n          </ModalFooter>\n        </Modal>\n        {this.props.isAuthenticated ? (\n          <MUIDataTable\n            title={\"Lista e Kategorive\"}\n            data={data}\n            columns={columns}\n            options={options}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  category: state.category,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getCategories, deleteCategory, getCategoryById, updateCategory }\n)(Category);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { addCategory } from \"../../../actions/categoryActions\"; //Import the action to add the item\nimport PropTypes from \"prop-types\";\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\nclass CategoryModal extends Component {\n  //Define the states\n  state = {\n    modal: false, //Determine the state of the modal\n    name: \"\" //The state of the name of inputs\n  };\n\n  static propTypes = {\n    isAuthenticated: PropTypes.bool\n  };\n\n  //Toggle the modal function\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  //Set the state of name when the input event is fired off\n  onChange = e => {\n    //We can add multiple input changes here\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  //Add the item\n  onSubmit = e => {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new item\n    const newCategory = {\n      name: this.state.name\n    };\n\n    //Add Item via addItem Action\n    this.props.addCategory(newCategory);\n\n    if(this.state.name === \"\")\n      {\n        toastr.error('Shtim', 'Kategoria duhet te kete emer');\n        return;\n      }\n    else {\n      toastr.success('Shtim', 'Kategoria u shtua me sukses');\n\n      //Close the modal\n      this.toggle();\n    }\n\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.isAuthenticated ? (\n          <Button\n            color=\"success\"\n            outline\n            style={{ marginBottom: \"2rem\" }}\n            onClick={this.toggle.bind(this) }\n          >\n            Shto Kategori\n          </Button>\n        ) : (\n          <h4 className=\"mb-3 ml-4\">Ju lutem logohuni qe te shtoni kategori</h4>\n        )}\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle} className=\"bg-light\">Shto te kategorite</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"category\">Kategori</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"category\"\n                  placeholder=\"Shto kategori\"\n                  onChange={this.onChange}\n                />\n                  <Button color=\"info\" outline style={{ marginTop: \"2rem\" }} block>\n                    Shto Kategori\n                  </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  category: state.category,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { addCategory }\n)(CategoryModal); //Because we are using connect\n","import React from \"react\";\n\nimport Category from \"./Category\";\nimport CategoryModal from \"../modals/category/categoryModal\";\n\nimport { Container } from \"reactstrap\";\n\nconst containerStyle = {\n  marginTop: '40px'\n}\n\nconst category_component = () => {\n  return (\n    <Container style={containerStyle}>\n      <CategoryModal />\n      <Category />\n    </Container>\n  );\n};\n\nexport default category_component;\n","//Define item actions\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING, GET_ITEM_BY_ID, UPDATE_ITEM } from \"./types\";\n//Http Client\nimport axios from \"axios\";\n//Import the token helper action to be able to add items\nimport { tokenConfig } from \"./authActions\";\n//To be able to return errors\nimport { \n    // errors, \n    returnErrors } from \"./errorActions\";\n\n//Action to get the items into the component\nexport const getItems = () => dispatch => {\n  dispatch(setItemsLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/items\")\n    .then(res =>\n      dispatch({\n        type: GET_ITEMS, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get an item by id into the components\nexport const getItemById = id => dispatch => {\n  axios\n    .get(`/api/items/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_ITEM_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n    \n};\n\n//Action to add an item\nexport const addItem = item => (dispatch, getState) => {\n  axios\n    .post(\"/api/items\", item, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_ITEM, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to delete an item\nexport const deleteItem = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/items/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_ITEM, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update an item\nexport const updateItem = item => (dispatch, getState) => {\n  axios\n    .put(`/api/items/${item._id}`, item, tokenConfig(getState))\n    .then(res => \n      dispatch({\n        type: UPDATE_ITEM,\n        payload: res.data\n      })\n    )\n    .catch(err => \n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n}\n\n//Dispatch Items Loading\nexport const setItemsLoading = () => {\n  return {\n    type: ITEMS_LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { connect } from \"react-redux\"; //Allows to get state from redux to react component\nimport {\n  getItems,\n  deleteItem,\n  getItemById,\n  updateItem\n} from \"../../actions/itemActions\"; //Import the actions\nimport { getCategories } from \"../../actions/categoryActions\";\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n//Date part\nimport moment from \"moment\"; //Moment library for date editting\n\n//Material-UI Part\nimport MUIDataTable from \"mui-datatables\";\n\n//\n//THE WAY REDUX WORKS\n//CARS => COMPONENT->ACTION->REDUCER->STORE\n\n//Toastr confirm options\nconst toastrConfirmOptions = {\n  onOk: () => {},\n  onCancel: () => {\n    console.log(\"CANCEL: clicked\");\n    return;\n  }\n};\n\n//Select Part\nlet select_values = [];\n\nclass ShoppingList extends Component {\n  state = {\n    editModal: false,\n    counter: 1,\n    editItem: {\n      _id: \"\",\n      name: \"\",\n      kodi: \"\",\n      cmimBlerje: \"\",\n      prodhuesi: \"\",\n      shitesi: \"\",\n      category: \"\"\n    }\n  };\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getItems: PropTypes.func.isRequired,\n    getItemById: PropTypes.func.isRequired,\n    updateItem: PropTypes.func.isRequired,\n    getCategories: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired, //Represents our state\n    category: PropTypes.object.isRequired,\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount(){\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshItems();\n  }\n\n  //Call the delete action\n  onDeleteClick = id => {\n    toastr.confirm(\"Je e sigurte ?\", toastrConfirmOptions);\n    toastrConfirmOptions.onOk = () => {\n      this.props.deleteItem(id);\n      console.log(\"Item Deleted\");\n      toastr.success(\"Produkti u fshi me sukses\");\n    };\n  };\n\n  //Call the update function\n  updateItem() {\n\n    //Call the update action and pass the item state\n    this.props.updateItem(this.state.editItem);\n\n    this.componentWillMount();\n\n    toastr.success(\n      \"Modifikim\",\n      `Produkti ${this.state.editItem.name} u modifikua me sukses`\n    );\n\n    //Refresh the data\n    this._refreshItems();\n\n    //Reset the state\n    this.setState({\n      editModal: false,\n      editItem: {\n        _id: \"\",\n        name: \"\",\n        kodi: \"\",\n        cmimBlerje: \"\",\n        prodhuesi: \"\",\n        shitesi: \"\",\n        category: \"\"\n    }\n    });\n  }\n\n  //Refresh function for the datas in the table\n  _refreshItems() {\n    this.props.getItems();\n    this.props.getCategories();\n  }\n\n  //Edit function to get the data from the table row into the state\n  editItem(_id, name, kodi, cmimBlerje, prodhuesi, shitesi, category) {\n    this.setState({\n      editItem: {\n        _id,\n        name,\n        kodi,\n        cmimBlerje,\n        prodhuesi,\n        shitesi,\n        category\n      },\n      editModal: !this.state.editModal\n    });\n  }\n\n  //Toggle the edit modal function\n  toggleEdit = () => {\n    this.setState({\n      editModal: !this.state.editModal\n    });\n  };\n\n  //Handle select input option\n  handleChange = category => {\n    let { editItem } = this.state;\n    editItem.category = category.value;\n    this.setState({ editItem });\n    console.log(`Option selected:`, category.value);\n  };\n\n  render() {\n    const { items } = this.props.item; //Pull the items\n    const { categories } = this.props.category; //Pull the categories\n\n    //Counter\n    let counter = this.state.counter;\n\n    select_values = categories.slice(0);\n    select_values = select_values.map(category => ({ label: category.name, value: category.name }))\n\n    const columns = [\n      \"Nr\",\n      \"Emri\",\n      \"Kodi\",\n      \"Cmimi Blerjes\",\n      \"Prodhuesi\",\n      \"Furnitori\",\n      \"Kategoria\",\n      \"Data Regjistrimit\",\n      \"Fshi/Modifiko\"\n    ];\n    const data = [];\n\n    items.map(\n      ({ _id, name, kodi, cmimBlerje, prodhuesi, shitesi, category, date }) =>\n        data.push([\n          counter++,\n          name,\n          kodi,\n          cmimBlerje,\n          prodhuesi,\n          shitesi,\n          category,\n          moment(date).calendar(),\n          <div>\n            <Button\n              className=\"remove-btn mb-2\"\n              outline\n              color=\"danger\"\n              size=\"sm\"\n              onClick={this.onDeleteClick.bind(this, _id)}\n            >\n              Fshi\n            </Button>\n            <Button\n              className=\"edit-btn\"\n              outline\n              color=\"warning\"\n              size=\"sm\"\n              onClick={this.editItem.bind(\n                this,\n                _id,\n                name,\n                kodi,\n                cmimBlerje,\n                prodhuesi,\n                shitesi,\n                category\n              )}\n            >\n              Modifiko\n            </Button>\n          </div>\n        ])\n    );\n    //&times;\n\n    //MUI-Table options\n    const options = {\n      filterType: \"dropdown\",\n      selectableRows: \"none\",\n      responsive: \"scroll\",\n      isRowSelectable: function(dataIndex) {\n        return false;\n      }\n    };\n\n    return (\n      <div>\n        {/* Edit Modal Part */}\n        <Modal\n          isOpen={this.state.editModal}\n          toggle={this.toggleEdit.bind(this)}\n          centered={true}\n        >\n          <ModalHeader toggle={this.toggleEdit.bind(this)}>\n            Modifiko produktet\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"item\">Emri Produktit</Label>\n                <Input\n                  type=\"text\"\n                  required\n                  name=\"name\"\n                  id=\"item\"\n                  value={this.state.editItem.name}\n                  onChange={e => {\n                    let { editItem } = this.state;\n                    editItem.name = e.target.value;\n                    this.setState({ editItem });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"kodi\">Kodi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"kodi\"\n                  id=\"kodi\"\n                  required\n                  value={this.state.editItem.kodi}\n                  onChange={e => {\n                    let { editItem } = this.state;\n                    editItem.kodi = e.target.value;\n                    this.setState({ editItem });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"cmimBlerje\">Cmimi Blerjes</Label>\n                <Input\n                  type=\"number\"\n                  name=\"cmimBlerje\"\n                  id=\"cmimBlerje\"\n                  required\n                  value={this.state.editItem.cmimBlerje}\n                  onChange={e => {\n                    let { editItem } = this.state;\n                    editItem.cmimBlerje = e.target.value;\n                    this.setState({ editItem });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"shitesi\">Shitesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"shitesi\"\n                  id=\"shitesi\"\n                  required\n                  value={this.state.editItem.shitesi}\n                  onChange={e => {\n                    let { editItem } = this.state;\n                    editItem.shitesi = e.target.value;\n                    this.setState({ editItem });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"prodhuesi\">Prodhuesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"prodhuesi\"\n                  id=\"prodhuesi\"\n                  required\n                  value={this.state.editItem.prodhuesi}\n                  onChange={e => {\n                    let { editItem } = this.state;\n                    editItem.prodhuesi = e.target.value;\n                    this.setState({ editItem });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"category\">Kategori</Label>\n                <Select\n                  name=\"category\"\n                  id=\"category\"\n                  autoFocus\n                  simpleValue\n                  options={select_values}\n                  value= {select_values.filter(cat => cat.value === this.state.editItem.category)}\n                  onChange={this.handleChange}\n                />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"info\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.updateItem.bind(this)}\n            >\n              Modifiko Produkt\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.toggleEdit.bind(this)}\n            >\n              Mbyll\n            </Button>\n          </ModalFooter>\n        </Modal>\n        {this.props.isAuthenticated ? (\n          <MUIDataTable\n            title={\"Lista e produkteve\"}\n            data={data}\n            columns={columns}\n            options={options}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  item: state.item,\n  category: state.category,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getItems, deleteItem, getItemById, updateItem, getCategories }\n)(ShoppingList);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport Select from 'react-select';\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { addItem } from \"../../../actions/itemActions\"; //Import the action to add the item\nimport { getCategories } from \"../../../actions/categoryActions\";//Import the action to call the categories\nimport PropTypes from \"prop-types\";\n\n//Select Part\nlet select_values = [];\n\n\nclass ItemModal extends Component {\n  //Define the states\n  state = {\n    modal: false, //Determine the state of the modal\n    name: \"\", //The state of the name of inputs\n    kodi: \"\",\n    cmimBlerje: 0,\n    prodhuesi: \"\",\n    shitesi: \"\",\n    category: \"\",\n  };\n\n  static propTypes = {\n    category: PropTypes.object.isRequired,\n    getCategories: PropTypes.func.isRequired,\n    isAuthenticated: PropTypes.bool,\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshCategories();\n  }\n\n  //Refresh function for the datas in the table\n  _refreshCategories() {\n    this.props.getCategories();\n  }\n\n  //Toggle the modal function\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  //Set the state of name when the input event is fired off\n  onChange = e => {\n    //We can add multiple input changes here\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  //Add the item\n  onSubmit = e => {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new item\n    const newItem = {\n      name: this.state.name,\n      kodi: this.state.kodi,\n      cmimBlerje: this.state.cmimBlerje,\n      prodhuesi: this.state.prodhuesi,\n      shitesi: this.state.shitesi,\n      category: this.state.category,\n    };\n\n    //Add Item via addItem Action\n    this.props.addItem(newItem);\n\n    //Close the modal\n    this.toggle();\n  };\n\n  //Handle select input option\n  handleChange = category => {\n    this.setState({ category:category.value });\n    //console.log(`Option selected:`, category.value);\n  };\n\n  render() {\n    const { categories } = this.props.category; //Pull the categories\n    const { category } = this.state;\n\n    select_values = categories.slice(0);\n     select_values = select_values.map(category => ({ label: category.name, value: category.name }))\n\n    return (\n      <div>\n        {this.props.isAuthenticated ? (\n          <Button\n            style={{ marginBottom: \"2rem\" }}\n            onClick={this.toggle.bind(this)}\n            outline\n            color=\"success\"\n          >\n            Shto Produkt\n          </Button>\n\n        ) : (\n          <h4 className=\"mb-3 ml-4\">Logohu qe te shtosh produkt</h4>\n        )}\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle} className=\"bg-light\">Shto te produktet</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"item\">Emri Produktit</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"item\"\n                  required\n                  placeholder=\"Emri...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"kodi\">Kodi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"kodi\"\n                  id=\"kodi\"\n                  required\n                  placeholder=\"Kodi...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"cmimBlerje\">Cmimi Blerjes</Label>\n                <Input\n                  type=\"number\"\n                  name=\"cmimBlerje\"\n                  id=\"cmimBlerje\"\n                  required\n                  placeholder=\"Cmimi...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"shitesi\">Shitesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"shitesi\"\n                  id=\"shitesi\"\n                  required\n                  placeholder=\"Shitesi\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"prodhuesi\">Prodhuesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"prodhuesi\"\n                  id=\"prodhuesi\"\n                  required\n                  placeholder=\"Prodhuesi\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"category\">Kategori</Label>\n                <Select \n                  options={select_values}\n                  value={category.value} \n                  name=\"category\"\n                  id=\"category\"\n                  required\n                  onChange={this.handleChange}\n                  placeholder=\"Kategoria...\"\n                  />\n                <Button color=\"info\" style={{ marginTop: \"2rem\" }} block outline>\n                  Shto Produkt\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  item: state.item,\n  category: state.category,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { addItem, getCategories },\n)(ItemModal); //Because we are using connect\n","import React from \"react\";\n\nimport ShoppingList from \"./ShoppingList\";\nimport ItemModal from \"../modals/Item/ItemModel\";\n\nimport { Container } from \"reactstrap\";\n\nconst containerStyle = {\n  marginTop: '40px'\n}\n\nconst itemShopping = () => {\n  return (\n    <Container style={containerStyle}>\n      <ItemModal />\n      <div style={containerStyle}>\n        <ShoppingList />\n      </div>\n      \n    </Container>\n  );\n};\n\nexport default itemShopping;\n","//Define buying actions\nimport {\n  GET_EVENTS,\n  ADD_EVENT,\n  DELETE_EVENT,\n  EVENTS_LOADING,\n  GET_EVENT_BY_ID,\n  UPDATE_EVENT\n} from \"./types\";\n\n//Http Client\nimport axios from \"axios\";\n\n//Import the token helper action to be able to add buyings\nimport { tokenConfig } from \"./authActions\";\n\n//To be able to return errors\nimport {\n  //  errors, \n  returnErrors } from \"./errorActions\";\n\n//Action to get the buyings into the component\nexport const getEvents = () => dispatch => {\n  dispatch(setEventsLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/events\")\n    .then(res =>\n      dispatch({\n        type: GET_EVENTS, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get an event by id into the components\nexport const getEventById = id => dispatch => {\n  axios\n    .get(`/api/events/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_EVENT_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n    \n};\n\n//Action to add a buying\nexport const addEvent = event => (dispatch, getState) => {\n  //console.log(buying);\n  axios\n    .post(\"/api/events\", event, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_EVENT, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err => console.log(err));\n};\n\n//Action to delete a buying\nexport const deleteEvent = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/events/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_EVENT, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update an event\nexport const updateEvent = event => (dispatch, getState) => {\n  axios\n    .put(`/api/events/${event._id}`, event, tokenConfig(getState))\n    .then(res => \n      dispatch({\n        type: UPDATE_EVENT,\n        payload: res.data\n      })\n    )\n    .catch(err => \n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n}\n\n//Dispatch buyings Loading\nexport const setEventsLoading = () => {\n  return {\n    type: EVENTS_LOADING\n  };\n};\n","import 'date-fns';\nimport React from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\n// import moment from \"moment\"; //Moment library for date editting\n\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { getEvents, addEvent } from \"../../../actions/eventActions\"; //Import the action to add the item\nimport PropTypes from \"prop-types\";\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\nfunction MaterialUIPickers(props) {\n\n  // The states declared for the Pickers\n  const [selectedStartDate, setSelectedStartDate] = React.useState(Date.now);\n  const [selectedEndDate, setSelectedEndDate] = React.useState(Date.now);\n  const [modal, setModal] = React.useState(false);\n  const [title, setTitle] = React.useState(\"\");\n  const [startDate, setStartDate] = React.useState(Date.now);\n  const [endDate, setEndDate] = React.useState(Date.now);\n\n  function handleStartDateChange(date) {\n    setSelectedStartDate(date);\n    setStartDate(date);\n  }\n\n  function handleEndDateChange(date) {\n    setSelectedEndDate(date);\n    setEndDate(date);\n  }\n\n  MaterialUIPickers.propTypes = {\n    isAuthenticated: PropTypes.bool,\n    addEvent: PropTypes.func.isRequired,\n    getEvents: PropTypes.func.isRequired\n  };\n\n  //Toggle the modal function\n  function toggle() {\n    setModal(!modal);\n  };\n\n  //Set the state of name when the input event is fired off\n  function onChange(e) {\n    //We can add multiple input changes here\n    setTitle( e.target.value );\n  };\n\n  //Add the item\n  function onSubmit(e) {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new event\n    const newEvent = {\n      title: title,\n      startDate: startDate,\n      endDate: endDate\n    };\n\n    if(startDate >= endDate)\n      {\n        toastr.error('Gabim', 'Data e fillimit nuk mund te jete me e madhe se data e mbarimit ose e njejte');\n        return;\n      }\n\n    //Add Event via addEvent Action\n    props.addEvent(newEvent);\n\n    //Close the modal\n    toggle();\n\n    toastr.success('Shtim', 'Eventi u shtua me sukses');\n    window.location.reload(true);\n  };\n\n  return (\n    <div>\n      {props.isAuthenticated ? (\n        <Button\n          color=\"success\"\n          outline\n          style={{ marginBottom: \"2rem\" }}\n          onClick={toggle.bind(this)}\n        >\n          Shto Event\n          </Button>\n      ) : (\n          <h4 className=\"mb-3 ml-4\">Ju lutem logohuni qe te shtoni evente</h4>\n        )}\n\n      <Modal isOpen={modal} toggle={toggle} centered={true}>\n        <ModalHeader toggle={toggle} className=\"bg-light\">Shto te Eventet</ModalHeader>\n        <ModalBody>\n          <Form onSubmit={onSubmit}>\n            <FormGroup>\n              <Label for=\"title\">Eventi</Label>\n              <Input\n                type=\"text\"\n                name=\"title\"\n                id=\"event\"\n                required={true}\n                placeholder=\"Eventi...\"\n                onChange={onChange}\n                className=\"mb-2\"\n              />\n              <MuiPickersUtilsProvider utils={DateFnsUtils} centered={true}>\n                <Grid container>\n                  <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Data fillimit\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedStartDate}\n                    onChange={handleStartDateChange}\n                    KeyboardButtonProps={{\n                      'aria-label': 'change date',\n                    }}\n                    className=\"mr-5 ml-2\"\n                  />\n                  <KeyboardTimePicker\n                    margin=\"normal\"\n                    id=\"time-picker\"\n                    ampm={false}\n                    label=\"Koha e fillimit te eventit\"\n                    value={selectedStartDate}\n                    onChange={handleStartDateChange}\n                    KeyboardButtonProps={{\n                      'aria-label': 'change time',\n                    }}\n                  />\n                </Grid>\n                <Grid container>\n                  <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Data mbarimit\"\n                    format=\"MM/dd/yyyy\"\n                    value={selectedEndDate}\n                    onChange={handleEndDateChange}\n                    KeyboardButtonProps={{\n                      'aria-label': 'change date',\n                    }}\n                    className=\"mr-5 ml-2\"\n                  />\n                  <KeyboardTimePicker\n                    margin=\"normal\"\n                    ampm={false}\n                    id=\"time-picker\"\n                    label=\"Koha e mbarimit te eventit\"\n                    value={selectedEndDate}\n                    onChange={handleEndDateChange}\n                    KeyboardButtonProps={{\n                      'aria-label': 'change time',\n                    }}\n                  />\n                </Grid>\n              </MuiPickersUtilsProvider>\n              <Button color=\"info\" outline style={{ marginTop: \"2rem\" }} block>\n                Shto Event\n              </Button>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n      </Modal>\n      {modal}\n    </div>\n  );\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  event: state.event,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getEvents, addEvent }\n)(MaterialUIPickers); //Because we are using connect","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\";\n//Date part\nimport moment from 'moment';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\nimport '../sass/styles.scss'\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n//Events Part\nimport { connect } from \"react-redux\"; //Allows to get state from redux to react component\nimport {\n  getEvents,\n  deleteEvent,\n  getEventById,\n  updateEvent\n} from \"../actions/eventActions\"; //Import the actions\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\n\n//Event Modal\nimport MaterialUIPickers from \"./modals/event/eventModal\";\n\n//Toastr confirm options\nconst toastrConfirmOptions = {\n  buttons: [\n    {\n      text: 'Fshi',\n      className: 'btn btn-outline-danger',\n      handler: () => {}\n    }, \n    {\n      cancel: true // move the cancel button to the end\n    }],\n  disableCancel: true,\n  style: {\n    fontSize: \"26px\"\n  }\n};\n\nconst containerStyle = {\n  marginTop: \"40px\",\n  marginLeft: \"10px\",\n  height: \"800px\"\n};\n\nconst localizer = momentLocalizer(moment)\nclass Home extends Component {\n\n  state = {\n    event: {\n      id: \"\",\n      title: \"\",\n      start: \"\",\n      end: \"\"\n    }\n  }\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshEvents();\n  }\n\n  //Refresh function for the datas in the table\n  _refreshEvents() {\n    this.props.getEvents();\n  }\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getEvents: PropTypes.func.isRequired,\n    getEventById: PropTypes.func.isRequired,\n    updateEvent: PropTypes.func.isRequired,\n    event: PropTypes.object.isRequired, //Represents our state\n    isAuthenticated: PropTypes.bool\n  };\n\n  callBackFunction = value => {\n    console.log(\"The selection is  -> \", value);\n  };\n\n  handleEventClick = event => {\n    toastr.confirm(<span style={{ fontSize: 20 }}>{event.title}</span>, toastrConfirmOptions);\n    toastrConfirmOptions.buttons[0].handler = () => {\n      this.props.deleteEvent(event.id);\n      toastr.success(\"Eventi u fshi me sukses\");\n    }\n  }\n\n  render() {\n    \n    const { events } = this.props.event;\n\n    const myEventsList = [];\n\n    events.map(\n      ({ _id, title, startDate, endDate }) => \n          myEventsList.push(\n            {\n              'id': _id,\n              'title':title,\n              'start':new Date(startDate),\n              'end':new Date(endDate),\n              \n            }\n          )\n    );\n\n    return (\n      <Container style={containerStyle}>\n        <MaterialUIPickers name=\"mario\"/>\n        <Calendar\n          popup\n          localizer={localizer}\n          events={myEventsList}\n          onSelectEvent={ event => {\n              this.setState({\n                event: event\n              });\n              this.handleEventClick(event);\n              \n          }}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          defaultView=\"day\"\n        />\n      </Container>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  event: state.event,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getEvents, deleteEvent, getEventById, updateEvent}\n)(Home);\n","//Define item actions\nimport {\n  GET_CLIENTS,\n  ADD_CLIENT,\n  DELETE_CLIENT,\n  CLIENTS_LOADING,\n  GET_CLIENT_BY_ID,\n  UPDATE_CLIENT\n} from \"./types\";\n\n//Http Client\nimport axios from \"axios\";\n\n//Import the token helper action to be able to add items\nimport { tokenConfig } from \"./authActions\";\n\n//To be able to return errors\nimport { \n  // errors, \n  returnErrors } from \"./errorActions\";\n\n//Action to get the items into the component\nexport const getClients = () => dispatch => {\n  dispatch(setClientsLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/clients\")\n    .then(res =>\n      dispatch({\n        type: GET_CLIENTS, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get a client by id into the components\nexport const getClientById = id => dispatch => {\n  axios\n    .get(`/api/clients/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_CLIENT_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to add a client\nexport const addClient = client => (dispatch, getState) => {\n  axios\n    .post(\"/api/clients\", client, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_CLIENT, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to delete an item\nexport const deleteClient = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/clients/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_CLIENT, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update a Client\nexport const updateClient = client => (dispatch, getState) => {\n  axios\n    .put(`/api/clients/${client._id}`, client, tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: UPDATE_CLIENT,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Dispatch Items Loading\nexport const setClientsLoading = () => {\n  return {\n    type: CLIENTS_LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\"; //Allows to get state from redux to react component\nimport {\n  getClients,\n  deleteClient,\n  getClientById,\n  updateClient\n} from \"../../actions/clientActions\"; //Import the actions\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\n\nimport moment from \"moment\"; //Moment library for date editting\n\n//Reactstrap part\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\n\n//Material-UI Part\nimport MUIDataTable from \"mui-datatables\";\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n//\n//THE WAY REDUX WORKS\n//CARS => COMPONENT->ACTION->REDUCER->STORE\n\n//Toastr confirm options\nconst toastrConfirmOptions = {\n  onOk: () => {},\n  onCancel: () => {\n    console.log(\"CANCEL: clicked\");\n    return;\n  }\n};\n\nclass ClientList extends Component {\n  state = {\n    editModal: false,\n    counter: 1,\n    editClient: {\n      _id: \"\",\n      name: \"\",\n      surname: \"\"\n    }\n  };\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getClients: PropTypes.func.isRequired,\n    getClientById: PropTypes.func.isRequired,\n    updateClient: PropTypes.func.isRequired,\n    client: PropTypes.object.isRequired, //Represents our state\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshClients();\n  }\n\n  //Call the delete action\n  onDeleteClick = id => {\n    toastr.confirm(\"Je e sigurte ?\", toastrConfirmOptions);\n    toastrConfirmOptions.onOk = () => {\n      this.props.deleteClient(id);\n      console.log(\"Client Deleted\");\n      toastr.success(\"Klienti u fshi me sukses\");\n    };\n  };\n\n  //Call the update function\n  updateClient() {\n\n    //Call the update action and pass the client state\n    this.props.updateClient(this.state.editClient);\n\n    toastr.success(\n      \"Modifikim\",\n      `Klienti ${this.state.editClient.name} u modifikua me sukses`\n    );\n\n    //Refresh the data\n    this._refreshClients();\n\n    this.componentWillMount();\n\n    //Reset the state\n    this.setState({\n      editModal: false,\n      counter: 1,\n      editClient: {\n        _id: \"\",\n        name: \"\",\n        surname: \"\"\n    }\n    });\n  }\n\n  //Refresh function for the datas in the table\n  _refreshClients() {\n    this.props.getClients();\n  }\n\n  //Edit function called to get the data from the table row into the state\n  editClient(_id, name, surname) {\n    this.setState({\n      editClient: {\n        _id,\n        name,\n        surname\n      },\n      editModal: !this.state.editModal\n    });\n  }\n\n  //Toggle the edit modal function\n  toggleEdit = () => {\n    this.setState({\n      editModal: !this.state.editModal\n    });\n  };\n\n  render() {\n    const { clients } = this.props.client; //Pull the clients\n\n    //Counter for rows\n    let counter = this.state.counter;\n\n    const columns = [\n      \"Nr\",\n      \"Emer\",\n      \"Mbiemer\",\n      \"Data Regjistrimit\",\n      \"Delete\"\n    ];\n    const data = [];\n\n    clients.map(({ _id, name, surname, date }) =>\n      data.push([\n        counter++,\n        name,\n        surname,\n        moment(date).calendar(),\n        <div>\n          <Button\n            className=\"remove-btn mb-2\"\n            outline\n            color=\"danger\"\n            size=\"sm\"\n            onClick={this.onDeleteClick.bind(this, _id)}\n          >\n            Fshi\n          </Button>\n          <Button\n            className=\"edit-btn\"\n            outline\n            color=\"warning\"\n            size=\"sm\"\n            onClick={this.editClient.bind(\n              this,\n              _id,\n              name,\n              surname\n            )}\n          >\n            Modifiko\n          </Button>\n        </div>\n      ])\n    );\n\n    const options = {\n      filterType: \"dropdown\",\n      responsive: \"scroll\",\n      selectableRows: \"none\",\n      isRowSelectable: function(dataIndex) {\n        return false;\n      }\n    };\n\n    return (\n      <div>\n        {/* Edit Modal Part */}\n        <Modal\n          isOpen={this.state.editModal}\n          toggle={this.toggleEdit.bind(this)}\n          centered={true}\n        >\n          <ModalHeader toggle={this.toggleEdit.bind(this)}>\n            Modifiko Klientin\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"name\">Emri Klientit</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  value={this.state.editClient.name}\n                  onChange={e => {\n                    let { editClient } = this.state;\n                    editClient.name = e.target.value;\n                    this.setState({ editClient });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"surname\">Mbiemri Klientit</Label>\n                <Input\n                  type=\"text\"\n                  name=\"surname\"\n                  id=\"surname\"\n                  value={this.state.editClient.surname}\n                  onChange={e => {\n                    let { editClient } = this.state;\n                    editClient.surname = e.target.value;\n                    this.setState({ editClient });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"info\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.updateClient.bind(this)}\n            >\n              Modifiko Produkt\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.toggleEdit.bind(this)}\n            >\n              Mbyll\n            </Button>\n          </ModalFooter>\n        </Modal>\n        {this.props.isAuthenticated ? (\n          <MUIDataTable\n            title={\"Lista e Klienteve\"}\n            data={data}\n            columns={columns}\n            options={options}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  client: state.client,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getClients, deleteClient, getClientById, updateClient }\n)(ClientList);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { addClient } from \"../../../actions/clientActions\"; //Import the action to add the item\nimport PropTypes from \"prop-types\";\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n\nclass ClientModal extends Component {\n  //Define the states\n  state = {\n    modal: false, //Determine the state of the modal\n    name: \"\", //The state of the name of inputs\n    surname: \"\"\n  };\n\n  static propTypes = {\n    isAuthenticated: PropTypes.bool\n  };\n\n  //Toggle the modal function\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  //Set the state of name when the input event is fired off\n  onChange = e => {\n    //We can add multiple input changes here\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  //Add the item\n  onSubmit = e => {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new item\n    const newClient = {\n      name: this.state.name,\n      surname: this.state.surname\n    };\n\n    //Add Item via addItem Action\n    this.props.addClient(newClient);\n\n    if(this.state.name === \"\"){\n      toastr.error('Shtim', 'Emri nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.surname === \"\"){\n      toastr.error('Shtim', 'Mbiemri nuk mund te jete bosh');\n        return;\n    }\n    else {\n      toastr.success('Shtim', 'Klienti u shtua me sukses');\n      \n      //Close the modal\n      this.toggle();\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.isAuthenticated ? (\n          <Button\n            className=\"success-btn mb-2\"\n            outline\n            color=\"success\"\n            onClick={this.toggle.bind(this)}\n          >\n            Shto Klient\n          </Button>\n        ) : (\n          <h4 className=\"mb-3 ml-4\">Ju lutem logohuni qe te shtoni kliente</h4>\n        )}\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle} className=\"bg-light\">Shto klient te ri</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"emri\">Emer</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"emri\"\n                  placeholder=\"Emer...\"\n                  onChange={this.onChange}\n                  className=\"mb-2\"\n                />\n                <Label for=\"surname\">Mbiemer</Label>\n                <Input\n                  type=\"text\"\n                  name=\"surname\"\n                  id=\"surname\"\n                  placeholder=\"Mbiemer...\"\n                  onChange={this.onChange}\n                  className=\"mb-2\"\n                />\n                <Button\n                  className=\"info-btn mb-2\"\n                  outline\n                  color=\"info\"\n                  block\n                >\n                  Shto\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  client: state.client,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { addClient }\n)(ClientModal); //Because we are using connect\n","import React from \"react\";\n\nimport ClientList from \"./ClientList\";\nimport ClientModal from \"../modals/client/clientModel\";\n\nimport { Container } from \"reactstrap\";\n\nconst containerStyle = {\n  marginTop: '40px'\n}\n\nconst client_component = () => {\n  return (\n    <Container style={containerStyle}>\n      <ClientModal />\n      <ClientList />\n    </Container>\n  );\n};\n\nexport default client_component;\n","//Define sale actions\nimport {\n  GET_SALES,\n  ADD_SALE,\n  DELETE_SALE,\n  SALES_LOADING,\n  GET_SALE_BY_ID,\n  UPDATE_SALE\n} from \"./types\";\n\n//Http Client\nimport axios from \"axios\";\n\n//Import the token helper action to be able to add sales\nimport { tokenConfig } from \"./authActions\";\n\n//To be able to return errors\nimport { \n  // errors, \n  returnErrors } from \"./errorActions\";\n\n//Action to get the sales into the component\nexport const getSales = () => dispatch => {\n  dispatch(setSalesLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/sales\")\n    .then(res =>\n      dispatch({\n        type: GET_SALES, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get a sale by id into the components\nexport const getSaleById = id => dispatch => {\n  axios\n    .get(`/api/sales/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_SALE_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to add a sale\nexport const addSale = sale => (dispatch, getState) => {\n  console.log(sale);\n  axios\n    .post(\"/api/sales\", sale, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_SALE, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err => console.log(err));\n};\n\n//Action to delete a sale\nexport const deleteSale = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/sales/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_SALE, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update a SALE\nexport const updateSale = sale => (dispatch, getState) => {\n  axios\n    .put(`/api/sales/${sale._id}`, sale, tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: UPDATE_SALE,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Dispatch sales Loading\nexport const setSalesLoading = () => {\n  return {\n    type: SALES_LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport {\n  getSales,\n  deleteSale,\n  getSaleById,\n  updateSale\n} from \"../../actions/saleActions\"; //Import the actions\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\nimport { connect } from \"react-redux\"; //To connect react and redux\n//Material-UI Part\nimport MUIDataTable from \"mui-datatables\";\nimport moment from \"moment\"; //Moment library for date editting\n\n//Toastr Part\n// import { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n//\n//THE WAY REDUX WORKS\n//CARS => COMPONENT->ACTION->REDUCER->STORE\n\nclass Sale extends Component {\n  state = {\n    editModal: false,\n    counter: 1,\n    editSale: {\n      _id: \"\",\n      clientName: \"\",\n      clientSurname: \"\",\n      productName: \"\",\n      sasia: \"\",\n      cmimi: \"\",\n      kodi: \"\"\n    }\n  };\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getSales: PropTypes.func.isRequired,\n    getSaleById: PropTypes.func.isRequired,\n    updateSale: PropTypes.func.isRequired,\n    sale: PropTypes.object.isRequired, //Represents our state\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshSales();\n  }\n\n  //Call the delete action\n  onDeleteClick = id => {\n    this.props.deleteSale(id);\n  };\n\n  //Call the update function\n  updateSale() {\n    //console.log(this.state.editSale._id);\n\n    //Call the update action and pass the sale state\n    this.props.updateSale(this.state.editSale);\n\n    //Refresh the data\n    this._refreshSales();\n\n    //For repeating items\n    this.componentWillMount();\n\n    //Reset the state\n    this.setState({\n      editModal: false,\n      _id: \"\",\n      clientName: \"\",\n      clientSurname: \"\",\n      productName: \"\",\n      sasia: \"\",\n      cmimi: \"\",\n      kodi: \"\"\n    });\n  }\n\n  //Refresh function for the datas in the table\n  _refreshSales() {\n    this.props.getSales();\n  }\n\n  //Edit function called to get the data from the table row into the state\n  editSale(_id, clientName, clientSurname, productName, sasia, cmimi, kodi) {\n    this.setState({\n      editSale: {\n        _id,\n        clientName,\n        clientSurname,\n        productName,\n        sasia,\n        cmimi,\n        kodi\n      },\n      editModal: !this.state.editModal\n    });\n  }\n\n  //Toggle the edit modal function\n  toggleEdit = () => {\n    this.setState({\n      editModal: !this.state.editModal\n    });\n  };\n\n  render() {\n    const { sales } = this.props.sale; //Pull the sales\n    const columns = [\n      \"Nr\",\n      \"Emer\",\n      \"Mbiemer\",\n      \"Emer Produkti\",\n      \"Sasia\",\n      \"Cmimi\",\n      \"Kodi\",\n      \"Data\",\n      \"Fshi\"\n    ];\n    const data = [];\n\n      sales.map(\n        ({\n          _id,\n          clientName,\n          clientSurname,\n          productName,\n          sasia,\n          cmimi,\n          kodi,\n          date\n        }) =>\n          data.push([\n            this.state.counter,\n            clientName,\n            clientSurname,\n            productName,\n            sasia,\n            cmimi,\n            kodi,\n            moment(date).calendar(),\n            <div>\n              <Button\n                className=\"remove-btn mb-2\"\n                outline\n                color=\"danger\"\n                size=\"sm\"\n                onClick={this.onDeleteClick.bind(this, _id)}\n              >\n                Fshi\n              </Button>\n              <Button\n                className=\"edit-btn\"\n                outline\n                color=\"warning\"\n                size=\"sm\"\n                onClick={this.editSale.bind(\n                  this,\n                  _id,\n                  clientName,\n                  clientSurname,\n                  productName,\n                  sasia,\n                  cmimi,\n                  kodi\n                )}\n              >\n                Modifiko\n              </Button>\n            </div>\n          ])\n      );\n\n    //console.log(sales);\n\n    const options = {\n      filterType: \"dropdown\",\n      responsive: \"scroll\",\n      selectableRows: \"none\",\n      isRowSelectable: function(dataIndex) {\n        return false;\n      }\n    };\n\n    return (\n      <div>\n        {/* Edit Modal Part */}\n        <Modal\n          isOpen={this.state.editModal}\n          toggle={this.toggleEdit.bind(this)}\n          centered={true}\n        >\n          <ModalHeader toggle={this.toggleEdit.bind(this)}>\n            Modifiko Shitjen\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"clientName\">Emri Klientit</Label>\n                <Input\n                  type=\"text\"\n                  name=\"clientName\"\n                  id=\"clientName\"\n                  value={this.state.editSale.clientName}\n                  onChange={e => {\n                    let { editSale } = this.state;\n                    editSale.clientName = e.target.value;\n                    this.setState({ editSale });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"clientSurname\">Mbiemri Klientit</Label>\n                <Input\n                  type=\"text\"\n                  name=\"clientSurname\"\n                  id=\"clientSurname\"\n                  value={this.state.editSale.clientSurname}\n                  onChange={e => {\n                    let { editSale } = this.state;\n                    editSale.clientSurname = e.target.value;\n                    this.setState({ editSale });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"productName\">Emri Produktit</Label>\n                <Input\n                  type=\"text\"\n                  name=\"productName\"\n                  id=\"productName\"\n                  value={this.state.editSale.productName}\n                  onChange={e => {\n                    let { editSale } = this.state;\n                    editSale.productName = e.target.value;\n                    this.setState({ editSale });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"sasia\">Sasia</Label>\n                <Input\n                  type=\"number\"\n                  name=\"sasia\"\n                  id=\"sasia\"\n                  value={this.state.editSale.sasia}\n                  onChange={e => {\n                    let { editSale } = this.state;\n                    editSale.sasia = e.target.value;\n                    this.setState({ editSale });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"cmimi\">Cmimi</Label>\n                <Input\n                  type=\"number\"\n                  name=\"cmimi\"\n                  id=\"cmimi\"\n                  value={this.state.editSale.cmimi}\n                  onChange={e => {\n                    let { editSale } = this.state;\n                    editSale.cmimi = e.target.value;\n                    this.setState({ editSale });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"kodi\">Kodi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"kodi\"\n                  id=\"kodi\"\n                  value={this.state.editSale.kodi}\n                  onChange={e => {\n                    let { editSale } = this.state;\n                    editSale.kodi = e.target.value;\n                    this.setState({ editSale });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"info\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.updateSale.bind(this)}\n            >\n              Modifiko Produkt\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.toggleEdit.bind(this)}\n            >\n              Mbyll\n            </Button>\n          </ModalFooter>\n        </Modal>\n        {this.props.isAuthenticated ? (\n          <MUIDataTable\n            title={\"Lista e Shitjeve\"}\n            data={data}\n            columns={columns}\n            options={options}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the sales state and maps it into a component property\nconst mapStateToProps = state => ({\n  sale: state.sale,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getSales, deleteSale, getSaleById, updateSale }\n)(Sale);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { addSale } from \"../../../actions/saleActions\"; //Import the action to add the sale\nimport PropTypes from \"prop-types\";\n\nclass SaleModal extends Component {\n\n  //Define the states\n  state = {\n    modal: false, //Determine the state of the modal\n    clientName: \"\", //The state of the name of inputs\n    clientSurname: \"\",\n    productName: \"\",\n    sasia: \"\",\n    cmimi: \"\",\n    kodi: \"\",\n    hasError: false\n\n  };\n\n  static propTypes = {\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({ hasError: true });\n    // You can also log the error to an error reporting service\n    //logErrorToMyService(error, info);\n  }\n\n  //Toggle the modal function\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  //Set the state of name when the input event is fired off\n  onChange = e => {\n    //console.log(e.target)\n    //We can add multiple input changes here\n    //console.log(this.state.clientName);\n    //console.log(e.target.name)\n    this.setState({ [e.target.name]: e.target.value\n    });\n    \n  };\n\n  //Add the sale\n  onSubmit = e => {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new sale\n    //console.log(e.target)\n    const newSale = {\n      clientName: this.state.clientName,\n      clientSurname: this.state.clientSurname,\n      productName: this.state.productName,\n      sasia: this.state.sasia,\n      cmimi: this.state.cmimi,\n      kodi: this.state.kodi\n    };\n\n    //Add Item via addSale Action\n    this.props.addSale(newSale);\n\n    //Close the modal\n    this.toggle();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    else {\n      return (\n        <div>\n          {this.props.isAuthenticated ? (\n            <Button\n              color=\"success\"\n              outline\n              style={{ marginBottom: \"2rem\" }}\n              onClick={ this.toggle.bind(this) }\n            >\n              Shto Shitje\n            </Button>\n          ) : (\n            <h4 className=\"mb-3 ml-4\">Please log in to add sale</h4>\n          )}\n  \n          <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n            <ModalHeader toggle={this.toggle} className=\"bg-light\">Shto shitje te re</ModalHeader>\n            <ModalBody>\n              <Form onSubmit={ this.onSubmit }>\n                <FormGroup>\n                  <Label for=\"clientName\">Emer</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"clientName\"\n                    id=\"clientName\"\n                    placeholder=\"Emer...\"\n                    onChange={this.onChange}\n                    className=\"mb-2\"\n                  />\n                  <Label for=\"clientSurname\">Mbiemer</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"clientSurname\"\n                    id=\"clientSurname\"\n                    placeholder=\"Mbiemer...\"\n                    onChange={this.onChange}\n                    className=\"mb-2\"\n                  />\n                  <Label for=\"productName\">Emri Produktit</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"productName\"\n                    id=\"productName\"\n                    placeholder=\"Emer Produkti...\"\n                    onChange={this.onChange}\n                    className=\"mb-2\"\n                  />\n                  <Label for=\"sasia\">Sasia</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"sasia\"\n                    id=\"sasia\"\n                    placeholder=\"Sasia...\"\n                    onChange={this.onChange}\n                    className=\"mb-2\"\n                  />\n                  <Label for=\"cmimi\">Cmimi</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"cmimi\"\n                    id=\"cmimi\"\n                    placeholder=\"Cmimi...\"\n                    onChange={this.onChange}\n                    className=\"mb-2\"\n                  />\n                  <Label for=\"kodi\">Kodi</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"kodi\"\n                    id=\"kodi\"\n                    placeholder=\"kodi...\"\n                    onChange={this.onChange}\n                    className=\"mb-2\"\n                  />\n                  <Button color=\"info\" outline style={{ marginTop: \"2rem\" }} block>\n                    Shto shitje\n                  </Button>\n                </FormGroup>\n              </Form>\n            </ModalBody>\n          </Modal>\n        </div>\n      );\n    }\n    \n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  sale: state.sale,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { addSale }\n)(SaleModal); //Because we are using connect\n","import React from \"react\";\n\nimport Sale from \"./Sale\";\nimport SaleModal from \"../modals/sale/saleModal\";\n\nimport { Container } from \"reactstrap\";\n\nconst containerStyle = {\n  marginTop: '40px'\n}\n\nconst sale_component = () => {\n  return (\n    <Container style={containerStyle}>\n      <SaleModal />\n      <Sale />\n    </Container>\n  );\n};\n\nexport default sale_component;\n","//Define buying actions\nimport {\n  GET_BUYINGS,\n  ADD_BUYING,\n  DELETE_BUYING,\n  BUYINGS_LOADING,\n  GET_BUYING_BY_ID,\n  UPDATE_BUYING\n} from \"./types\";\n\n//Http Client\nimport axios from \"axios\";\n\n//Import the token helper action to be able to add buyings\nimport { tokenConfig } from \"./authActions\";\n\n//To be able to return errors\nimport {\n  // errors,\n  returnErrors\n} from \"./errorActions\";\n\n//Action to get the buyings into the component\nexport const getBuyings = () => dispatch => {\n  dispatch(setBuyingsLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/buyings\")\n    .then(res =>\n      dispatch({\n        type: GET_BUYINGS, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get a buying by id into the components\nexport const getBuyingById = id => dispatch => {\n  axios\n    .get(`/api/buyings/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_BUYING_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n\n};\n\n//Action to add a buying\nexport const addBuying = buying => (dispatch, getState) => {\n  //console.log(buying);\n  axios\n    .post(\"/api/buyings\", buying, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_BUYING, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err => console.log(err));\n};\n\n//Action to delete a buying\nexport const deleteBuying = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/buyings/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_BUYING, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update a buying\nexport const updateBuying = buying => (dispatch, getState) => {\n  axios\n    .put(`/api/buyings/${buying._id}`, buying, tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: UPDATE_BUYING,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n}\n\n//Dispatch buyings Loading\nexport const setBuyingsLoading = () => {\n  return {\n    type: BUYINGS_LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { addBuying } from \"../../../actions/buyingActions\"; //Import the action to add the item\nimport PropTypes from \"prop-types\";\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n\nclass BuyingModal extends Component {\n  //Define the states\n  state = {\n    modal: false, //Determine the state of the modal\n    name: \"\", //The state of the name of inputs\n    kodi: \"\",\n    cmimBlerje: 0,\n    prodhuesi: \"\",\n    shitesi: \"\",\n    sasia: 0\n  };\n\n  static propTypes = {\n    isAuthenticated: PropTypes.bool\n  };\n\n  //Toggle the modal function\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  //Set the state of name when the input event is fired off\n  onChange = e => {\n    //We can add multiple input changes here\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  //Add the item\n  onSubmit = e => {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new item\n    const newBuying = {\n      name: this.state.name,\n      kodi: this.state.kodi,\n      cmimBlerje: this.state.cmimBlerje,\n      prodhuesi: this.state.prodhuesi,\n      shitesi: this.state.shitesi,\n      sasia: this.state.sasia\n    };\n\n    //Add Item via addItem Action\n    this.props.addBuying(newBuying);\n\n    if(this.state.name === \"\"){\n      toastr.error('Shtim', 'Emri nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.kodi === \"\"){\n      toastr.error('Shtim', 'Kodi nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.cmimBlerje === 0){\n      toastr.error('Shtim', 'Cmimi blerjes nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.prodhuesi === \"\"){\n      toastr.error('Shtim', 'Prodhuesi nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.shitesi === \"\"){\n      toastr.error('Shtim', 'Shitesi nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.sasia === 0){\n      toastr.error('Shtim', 'Sasia nuk mund te jete bosh');\n        return;\n    }\n    else {\n      toastr.success('Shtim', 'Blerja u shtua me sukses');\n      \n      //Close the modal\n      this.toggle();\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.isAuthenticated ? (\n          <Button\n            style={{ marginBottom: \"2rem\" }}\n            onClick={this.toggle.bind(this)}\n            outline\n            color=\"success\"\n          >\n            Shto Blerje\n          </Button>\n        ) : (\n          <h4 className=\"mb-3 ml-4\">Logohu qe te shtosh blerje</h4>\n        )}\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle} className=\"bg-light\">Shto te blerjet</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"item\">Emri</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"item\"\n                  placeholder=\"Emri...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"kodi\">Kodi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"kodi\"\n                  id=\"kodi\"\n                  placeholder=\"Kodi...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"cmimBlerje\">Cmimi Blerjes</Label>\n                <Input\n                  type=\"number\"\n                  name=\"cmimBlerje\"\n                  id=\"cmimBlerje\"\n                  placeholder=\"Cmimi...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"shitesi\">Shitesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"shitesi\"\n                  id=\"shitesi\"\n                  placeholder=\"Shitesi\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"prodhuesi\">Prodhuesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"prodhuesi\"\n                  id=\"prodhuesi\"\n                  placeholder=\"Prodhuesi\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"sasia\">Sasia</Label>\n                <Input\n                  type=\"number\"\n                  name=\"sasia\"\n                  id=\"sasia\"\n                  placeholder=\"Sasia...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Button\n                  color=\"info\"\n                  style={{ marginTop: \"2rem\" }}\n                  block\n                  outline\n                >\n                  Shto Shitje\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the items state and maps it into a component property\nconst mapStateToProps = state => ({\n  buying: state.buying,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { addBuying }\n)(BuyingModal); //Because we are using connect\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\"; //Allows to get state from redux to react component\nimport {\n  getBuyings,\n  deleteBuying,\n  getBuyingById,\n  updateBuying\n} from \"../../actions/buyingActions\"; //Import the actions\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\nimport { connect } from \"react-redux\"; //To connect react and redux\n//Material-UI Part\nimport MUIDataTable from \"mui-datatables\";\nimport moment from \"moment\"; //Moment library for date editting\n\n//\n//THE WAY REDUX WORKS\n//CARS => COMPONENT->ACTION->REDUCER->STORE\n\nclass Buying extends Component {\n  state = {\n    editModal: false,\n    counter: 1,\n    editBuying: {\n      _id: \"\",\n      name: \"\",\n      kodi: \"\",\n      cmimBlerje: \"\",\n      prodhuesi: \"\",\n      shitesi: \"\",\n      sasia: \"\"\n    }\n  };\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getBuyings: PropTypes.func.isRequired,\n    getBuyingById: PropTypes.func.isRequired,\n    updateBuying: PropTypes.func.isRequired,\n    buying: PropTypes.object.isRequired, //Represents our state\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshBuyings();\n  }\n\n  //Call the delete action\n  onDeleteClick = id => {\n    this.props.deleteBuying(id);\n  };\n\n  //Call the update function\n  updateSale() {\n\n    //Call the update action and pass the sale state\n    this.props.updateBuying(this.state.editBuying);\n\n    //Refresh the data\n    this._refreshBuyings();\n\n    this.componentWillMount();\n\n    //Reset the state\n    this.setState({\n      editModal: false,\n      _id: \"\",\n      name: \"\",\n      kodi: \"\",\n      cmimBlerje: \"\",\n      prodhuesi: \"\",\n      shitesi: \"\",\n      sasia: \"\"\n    });\n  }\n\n  //Refresh function for the datas in the table\n  _refreshBuyings() {\n    this.props.getBuyings();\n  }\n\n  //Edit function called to get the data from the table row into the state\n  editBuying(_id, name, kodi, cmimBlerje, prodhuesi, shitesi, sasia) {\n    this.setState({\n      editBuying: {\n        _id,\n        name,\n        kodi,\n        cmimBlerje,\n        prodhuesi,\n        shitesi,\n        sasia\n      },\n      editModal: !this.state.editModal\n    });\n  }\n\n  //Toggle the edit modal function\n  toggleEdit = () => {\n    this.setState({\n      editModal: !this.state.editModal\n    });\n  };\n\n  render() {\n    //console.log(this.props);\n    const { buyings } = this.props.buying; //Pull the buyings\n\n    //Counter\n    let counter = this.state.counter;\n\n    const columns = [\n      \"Nr\",\n      \"Emer\",\n      \"Kodi\",\n      \"Cmimi Blerjes\",\n      \"Prodhuesi\",\n      \"Shitesi\",\n      \"Sasia\",\n      \"Data Regjistrimit\",\n      \"Fshi/Modifiko\"\n    ];\n    const data = [];\n\n    buyings.map(\n      ({\n        _id,\n        name,\n        kodi,\n        cmimBlerje,\n        prodhuesi,\n        shitesi,\n        sasia,\n        date\n      }) =>\n        data.push([\n          counter++,\n          name,\n          kodi,\n          cmimBlerje,\n          prodhuesi,\n          shitesi,\n          sasia,\n          moment(date).calendar(),\n          <div>\n            <Button\n              className=\"remove-btn mb-2\"\n              outline\n              color=\"danger\"\n              size=\"sm\"\n              onClick={this.onDeleteClick.bind(this, _id)}\n            >\n              Fshi\n            </Button>\n            <Button\n              className=\"edit-btn\"\n              outline\n              color=\"warning\"\n              size=\"sm\"\n              onClick={this.editBuying.bind(\n                this,\n                _id,\n                name,\n                kodi,\n                cmimBlerje,\n                prodhuesi,\n                shitesi,\n                sasia\n              )}\n            >\n              Modifiko\n            </Button>\n          </div>\n        ])\n    );\n\n    const options = {\n      filterType: \"dropdown\",\n      responsive: \"scroll\",\n      selectableRows: \"none\",\n      isRowSelectable: function(dataIndex) {\n        return false;\n      }\n    };\n\n    return (\n      <div>\n        {/* Edit Modal Part */}\n        <Modal\n          isOpen={this.state.editModal}\n          toggle={this.toggleEdit.bind(this)}\n          centered={true}\n        >\n          <ModalHeader toggle={this.toggleEdit.bind(this)}>\n            Modifiko Blerjen\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"name\">Emri</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  required\n                  value={this.state.editBuying.name}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.name = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"kodi\">Kodi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"kodi\"\n                  id=\"kodi\"\n                  required\n                  value={this.state.editBuying.kodi}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.kodi = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"cmimBlerje\">Cmimi Blerjes</Label>\n                <Input\n                  type=\"number\"\n                  name=\"cmimBlerje\"\n                  id=\"cmimBlerje\"\n                  required\n                  value={this.state.editBuying.cmimBlerje}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.cmimBlerje = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"prodhuesi\">Prodhuesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"prodhuesi\"\n                  id=\"prodhuesi\"\n                  required\n                  value={this.state.editBuying.prodhuesi}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.prodhuesi = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"shitesi\">Shitesi</Label>\n                <Input\n                  type=\"text\"\n                  name=\"shitesi\"\n                  id=\"shitesi\"\n                  required\n                  value={this.state.editBuying.shitesi}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.shitesi = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"category\">Kategori</Label>\n                <Input\n                  type=\"text\"\n                  name=\"category\"\n                  id=\"category\"\n                  required\n                  value={this.state.editBuying.category}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.category = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"sasia\">sasia</Label>\n                <Input\n                  type=\"number\"\n                  name=\"sasia\"\n                  id=\"sasia\"\n                  required\n                  value={this.state.editBuying.sasia}\n                  onChange={e => {\n                    let { editBuying } = this.state;\n                    editBuying.sasia = e.target.value;\n                    this.setState({ editBuying });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"info\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.updateSale.bind(this)}\n            >\n              Modifiko Blerjen\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.toggleEdit.bind(this)}\n            >\n              Mbyll\n            </Button>\n          </ModalFooter>\n        </Modal>\n        {this.props.isAuthenticated ? (\n          <MUIDataTable\n            title={\"Lista e Blerjeve\"}\n            data={data}\n            columns={columns}\n            options={options}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the sales state and maps it into a component property\nconst mapStateToProps = state => ({\n  buying: state.buying,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getBuyings, deleteBuying, getBuyingById, updateBuying }\n)(Buying);\n","import React from \"react\";\nimport BuyingModal from \"../modals/buying/buyingModal\";\n\nimport { Container } from \"reactstrap\";\nimport Buying from \"./Buying\";\n\nconst containerStyle = {\n  marginTop: '40px'\n}\n\nconst sale_component = () => {\n  return (\n    <Container style={containerStyle}>\n      <BuyingModal />\n      <Buying />\n    </Container>\n  );\n};\n\nexport default sale_component;","//Define item actions\nimport { GET_EMPLOYEES, ADD_EMPLOYEE, DELETE_EMPLOYEE, EMPLOYEES_LOADING, GET_EMPLOYEE_BY_ID, UPDATE_EMPLOYEE } from \"./types\";\n//Http Client\nimport axios from \"axios\";\n//Import the token helper action to be able to add items\nimport { tokenConfig } from \"./authActions\";\n//To be able to return errors\nimport { \n      // errors, \n      returnErrors } from \"./errorActions\";\n\n//Action to get the employees into the component\nexport const getEmployees = () => dispatch => {\n  dispatch(setEmployeesLoading()); //Change the state of the loading\n  axios\n    .get(\"/api/employees\")\n    .then(res =>\n      dispatch({\n        type: GET_EMPLOYEES, //use the get action\n        payload: res.data //Get the data from response and send them as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to get an employee by id into the components\nexport const getEmployeeById = id => dispatch => {\n  axios\n    .get(`/api/employees/${id}`) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: GET_EMPLOYEE_BY_ID, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n\n};\n\n//Action to add an employee\nexport const addEmployee = employee => (dispatch, getState) => {\n  axios\n    .post(\"/api/employees\", employee, tokenConfig(getState)) //Post the data from the modal into the api\n    .then(res =>\n      dispatch({\n        type: ADD_EMPLOYEE, //Define the action\n        payload: res.data //Send as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to delete an employee\nexport const deleteEmployee = id => (dispatch, getState) => {\n  axios\n    .delete(`/api/employees/${id}`, tokenConfig(getState)) //Send the id as defined in our back end api\n    .then(res =>\n      dispatch({\n        type: DELETE_EMPLOYEE, //Define the action\n        payload: id //Send the id as a payload\n      })\n    )\n    .catch(err =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n//Action to update an employee\nexport const updateEmployee = employee => (dispatch, getState) => {\n  axios\n    .put(`/api/employees/${employee._id}`, employee, tokenConfig(getState))\n    .then(res =>\n      dispatch({\n        type: UPDATE_EMPLOYEE,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      {dispatch(returnErrors(err.response.data, err.response.status))\n        console.log(err);\n      }\n    );\n}\n\n//Dispatch Employees Loading\nexport const setEmployeesLoading = () => {\n  return {\n    type: EMPLOYEES_LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\"; //Allows to get state from redux to react component\nimport {\n  getEmployees,\n  deleteEmployee,\n  getEmployeeById,\n  updateEmployee\n} from \"../../actions/employeeActions\"; //Import the actions\nimport PropTypes from \"prop-types\"; //Whenever you have component property put it inside a proptypes which is a form of validation\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n//Date part\nimport moment from \"moment\"; //Moment library for date editting\n\n//Material-UI Part\nimport MUIDataTable from \"mui-datatables\";\n\n//\n//THE WAY REDUX WORKS\n//CARS => COMPONENT->ACTION->REDUCER->STORE\n\n//Toastr confirm options\nconst toastrConfirmOptions = {\n  onOk: () => {},\n  onCancel: () => {\n    console.log(\"CANCEL: clicked\");\n    return;\n  }\n};\n\nclass Employee extends Component {\n  state = {\n    editModal: false,\n    counter: 1,\n    editEmployee: {\n      _id: \"\",\n      name: \"\",\n      surname: \"\",\n      numerSigurime: \"\",\n      pozicioni: \"\",\n      adresa: \"\",\n      paga: 0\n    }\n  };\n\n  //When you bring in an action from redux it is going to be stored as props\n  static propTypes = {\n    getEmployees: PropTypes.func.isRequired,\n    getEmployeeById: PropTypes.func.isRequired,\n    updateEmployee: PropTypes.func.isRequired,\n    employee: PropTypes.object.isRequired, //Represents our state\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n    this._refreshItems();\n  }\n\n\n  //Call the delete action\n  onDeleteClick = id => {\n    toastr.confirm(\"Je e sigurte ?\", toastrConfirmOptions);\n    toastrConfirmOptions.onOk = () => {\n      this.props.deleteEmployee(id);\n      console.log(\"Employee Deleted\");\n      toastr.success(\"Punetori u fshi me sukses\");\n    };\n  };\n\n  //Call the update function\n  updateEmployee() {\n\n    //Call the update action and pass the item state\n    this.props.updateEmployee(this.state.editEmployee);\n\n    //Refresh the data\n    this._refreshItems();\n\n    this.componentWillMount();\n\n    toastr.success(\n      \"Modifikim\",\n      `Punetori ${this.state.editEmployee.name} u modifikua me sukses`\n    );\n\n    //Reset the state\n    this.setState({\n      editModal: false,\n      counter: 1,\n      editEmployee: {\n        _id: \"\",\n        name: \"\",\n        surname: \"\",\n        numerSigurime: \"\",\n        pozicioni: \"\",\n        adresa: \"\",\n        paga: 0\n      }\n    });\n  }\n\n  //Refresh function for the datas in the table\n  _refreshItems() {\n    this.props.getEmployees();\n  }\n\n  //Edit function to get the data from the table row into the state\n  editEmployee(\n    _id,\n    name,\n    surname,\n    numerSigurime,\n    pozicioni,\n    adresa,\n    paga\n  ) {\n    this.setState({\n      editEmployee: {\n        _id,\n        name,\n        surname,\n        numerSigurime,\n        pozicioni,\n        adresa,\n        paga\n      },\n      editModal: !this.state.editModal\n    });\n  }\n\n  //Toggle the edit modal function\n  toggleEdit = () => {\n    this.setState({\n      editModal: !this.state.editModal\n    });\n  };\n\n  render() {\n    const { employees } = this.props.employee; //Pull the employees\n\n    let counter = this.state.counter;\n\n    const columns = [\n      \"Nr\",\n      \"Emri\",\n      \"Mbiemri\",\n      \"Nr.Sigurimesh\",\n      \"Pozicioni\",\n      \"Adresa\",\n      \"Paga\",\n      \"Data Regjistrimit\",\n      \"Fshi/Modifiko\"\n    ];\n    const data = [];\n\n    employees.map(\n      ({\n        _id,\n        name,\n        surname,\n        numerSigurime,\n        pozicioni,\n        adresa,\n        paga,\n        date\n      }) =>\n        data.push([\n          counter++,\n          name,\n          surname,\n          numerSigurime,\n          pozicioni,\n          adresa,\n          paga,\n          moment(date).calendar(),\n          <div>\n            <Button\n              className=\"remove-btn mb-2\"\n              outline\n              color=\"danger\"\n              size=\"sm\"\n              onClick={this.onDeleteClick.bind(this, _id)}\n            >\n              Fshi\n            </Button>\n            <Button\n              className=\"edit-btn\"\n              outline\n              color=\"warning\"\n              size=\"sm\"\n              onClick={this.editEmployee.bind(\n                this,\n                _id,\n                name,\n                surname,\n                numerSigurime,\n                pozicioni,\n                adresa,\n                paga\n              )}\n            >\n              Modifiko\n            </Button>\n          </div>\n        ])\n    );\n\n    //MUI-Table options\n    const options = {\n      filterType: \"dropdown\",\n      selectableRows: \"none\",\n      responsive: \"scroll\",\n      isRowSelectable: function(dataIndex) {\n        return false;\n      }\n    };\n\n    return (\n      <div>\n        {/* Edit Modal Part */}\n        <Modal\n          isOpen={this.state.editModal}\n          toggle={this.toggleEdit.bind(this)}\n          centered={true}\n        >\n          <ModalHeader toggle={this.toggleEdit.bind(this)}>\n            Modifiko punetore\n          </ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup>\n                <Label for=\"name\">Emri</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  value={this.state.editEmployee.name}\n                  onChange={e => {\n                    let { editEmployee } = this.state;\n                    editEmployee.name = e.target.value;\n                    this.setState({ editEmployee });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"surname\">Mbiemri</Label>\n                <Input\n                  type=\"text\"\n                  name=\"surname\"\n                  id=\"surname\"\n                  value={this.state.editEmployee.surname}\n                  onChange={e => {\n                    let { editEmployee } = this.state;\n                    editEmployee.surname = e.target.value;\n                    this.setState({ editEmployee });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"numerSigurime\">Numri Sigurimeve</Label>\n                <Input\n                  type=\"text\"\n                  name=\"numerSigurime\"\n                  id=\"numerSigurime\"\n                  value={this.state.editEmployee.numerSigurime}\n                  onChange={e => {\n                    let { editEmployee } = this.state;\n                    editEmployee.numerSigurime = e.target.value;\n                    this.setState({ editEmployee });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"pozicioni\">Pozicioni</Label>\n                <Input\n                  type=\"text\"\n                  name=\"pozicioni\"\n                  id=\"pozicioni\"\n                  value={this.state.editEmployee.pozicioni}\n                  onChange={e => {\n                    let { editEmployee } = this.state;\n                    editEmployee.pozicioni = e.target.value;\n                    this.setState({ editEmployee });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"adresa\">Adresa</Label>\n                <Input\n                  type=\"text\"\n                  name=\"adresa\"\n                  id=\"adresa\"\n                  value={this.state.editEmployee.adresa}\n                  onChange={e => {\n                    let { editEmployee } = this.state;\n                    editEmployee.adresa = e.target.value;\n                    this.setState({ editEmployee });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"paga\">Paga</Label>\n                <Input\n                  type=\"number\"\n                  name=\"paga\"\n                  id=\"paga\"\n                  value={this.state.editEmployee.paga}\n                  onChange={e => {\n                    let { editEmployee } = this.state;\n                    editEmployee.paga = e.target.value;\n                    this.setState({ editEmployee });\n                  }}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"info\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.updateEmployee.bind(this)}\n            >\n              Modifiko Punetor\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              style={{ marginTop: \"2rem\" }}\n              block\n              outline\n              onClick={this.toggleEdit.bind(this)}\n            >\n              Mbyll\n            </Button>\n          </ModalFooter>\n        </Modal>\n        {this.props.isAuthenticated ? (\n          <MUIDataTable\n            title={\"Lista e punetoreve\"}\n            data={data}\n            columns={columns}\n            options={options}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the employees state and maps it into a component property\nconst mapStateToProps = state => ({\n  employee: state.employee,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { getEmployees, deleteEmployee, getEmployeeById, updateEmployee }\n)(Employee);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\n//import Select from \"react-select\";\nimport { connect } from \"react-redux\"; //To connect react and redux\nimport { addEmployee } from \"../../../actions/employeeActions\"; //Import the action to add the item\nimport PropTypes from \"prop-types\";\n\n//Toastr Part\nimport { toastr } from \"react-redux-toastr\"; //Toastr for validation notifications\nimport \"react-redux-toastr/lib/css/react-redux-toastr.min.css\"; //CSS for toastr\n\n\nclass EmployeeModal extends Component {\n  //Define the states\n  state = {\n    modal: false, //Determine the state of the modal\n    name: \"\",\n    surname: \"\",\n    numerSigurime: \"\",\n    pozicioni: \"\",\n    adresa: \"\",\n    paga: 0\n  };\n\n  static propTypes = {\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentWillMount() {\n    //Runs when the component mounts\n    //Here we run actions\n  }\n\n  //Toggle the modal function\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  //Set the state of name when the input event is fired off\n  onChange = e => {\n    //We can add multiple input changes here\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  //Add the item\n  onSubmit = e => {\n    e.preventDefault(); //To prevent the form from submitting naturally\n\n    //Define the new item\n    const newEmployee = {\n      name: this.state.name,\n      surname: this.state.surname,\n      numerSigurime: this.state.numerSigurime,\n      pozicioni: this.state.pozicioni,\n      adresa: this.state.adresa,\n      paga: this.state.paga\n    };\n\n    //Add Employee via addEmployee Action\n    this.props.addEmployee(newEmployee);\n\n    if(this.state.name === \"\") {\n      toastr.error('Shtim', 'Emri nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.surname === \"\") {\n      toastr.error('Shtim', 'Mbiemri nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.numerSigurime === \"\") {\n      toastr.error('Shtim', 'Numri sigurimeve nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.pozicioni === \"\") {\n      toastr.error('Shtim', 'Pozicioni nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.adresa === \"\") {\n      toastr.error('Shtim', 'Adresa nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.paga === 0) {\n      toastr.error('Shtim', 'Paga nuk mund te jete bosh');\n        return;\n    }\n    else if(this.state.paga <= 0) {\n      toastr.error('Shtim', 'Paga nuk mund te jete me e vogel ose e barabarte me 0 ');\n        return;\n    }\n    else {\n        toastr.success('Shtim', 'Punonjesi u shtua me sukses');\n        \n        //Close the modal\n        this.toggle();\n    }\n  };\n\n  //Handle select input option\n  handleChange = category => {\n    this.setState({ category: category.value });\n    //console.log(`Option selected:`, category.value);\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.isAuthenticated ? (\n          <Button\n            style={{ marginBottom: \"2rem\" }}\n            onClick={this.toggle.bind(this)}\n            outline\n            color=\"success\"\n          >\n            Shto Punetor\n          </Button>\n        ) : (\n          <h4 className=\"mb-3 ml-4\">Logohu qe te shtosh punetor</h4>\n        )}\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle} centered={true}>\n          <ModalHeader toggle={this.toggle} className=\"bg-light\">Shto punetor</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"name\">Emri</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Emri...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"surname\">Mbiemri</Label>\n                <Input\n                  type=\"text\"\n                  name=\"surname\"\n                  id=\"surname\"\n                  placeholder=\"Mbiemri...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"numerSigurime\">Numri Sigurimeve</Label>\n                <Input\n                  type=\"text\"\n                  name=\"numerSigurime\"\n                  id=\"numerSigurime\"\n                  placeholder=\"Numri sigurimeve...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"pozicioni\">Pozicioni</Label>\n                <Input\n                  type=\"text\"\n                  name=\"pozicioni\"\n                  id=\"pozicioni\"\n                  placeholder=\"Pozicioni...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"adresa\">Adresa</Label>\n                <Input\n                  type=\"text\"\n                  name=\"adresa\"\n                  id=\"adresa\"\n                  placeholder=\"Adresa...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Label for=\"paga\">Paga</Label>\n                <Input\n                  type=\"number\"\n                  name=\"paga\"\n                  id=\"paga\"\n                  placeholder=\"Paga...\"\n                  onChange={this.onChange}\n                  style={{ marginBottom: \"1rem\" }}\n                />\n                <Button\n                  color=\"info\"\n                  style={{ marginTop: \"2rem\" }}\n                  block\n                  outline\n                >\n                  Shto Punetor\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\n//Mapping function\n//Allow to take the employees state and maps it into a component property\nconst mapStateToProps = state => ({\n  employee: state.employee,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\n//Connect takes as parameters the action and our mapping function\nexport default connect(\n  mapStateToProps,\n  { addEmployee }\n)(EmployeeModal); //Because we are using connect\n","import React from \"react\";\n\nimport Employee from \"./Employee\";\nimport EmployeeModal from \"../modals/employee/addEmployeeModal\";\n\nimport { Container } from \"reactstrap\";\n\nconst containerStyle = {\n  marginTop: '10px'\n}\n\nconst employee = () => {\n  return (\n    <Container style={containerStyle}>\n      <EmployeeModal />\n      <div style={containerStyle}>\n        <Employee />\n      </div>\n      \n    </Container>\n  );\n};\n\nexport default employee;\n","import React, { Component } from \"react\";\nimport ResponsiveDrawer from \"./components/navigation/AppNavMaterial\";\n\n//Redux files\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n//Authentication\nimport { loadUser } from \"./actions/authActions\";\n\n//Styles\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n//Import Components\n//import EnhancedTableHead from \"./components/About\";\nimport category_component from \"./components/category/categories_component\";\nimport itemShopping from \"./components/items/itemShopping\";\nimport Home from \"./components/Home\";\nimport client_component from \"./components/clients/client_component\";\nimport sales_component from \"./components/sales/sales_component\";\nimport buyings_component from \"./components/buyings/buyings_component\";\nimport employee from \"./components/employees/employees_component\";\n\n//Toastr Component\nimport ReduxToastr from \"react-redux-toastr\";\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(loadUser());\n  }\n\n  render() {\n    return (\n      //To use redux into the components, to get the things from the state we wrap everything into a provider\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <ResponsiveDrawer>\n              <ReduxToastr\n                timeOut={4000}\n                newestOnTop={false}\n                preventDuplicates\n                position=\"top-left\"\n                transitionIn=\"fadeIn\"\n                transitionOut=\"fadeOut\"\n                progressBar\n                closeOnToastrClick\n              />\n              <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/sales\" component={sales_component} />\n                <Route path=\"/buyings\" component={buyings_component} />\n                <Route path=\"/shopping\" component={itemShopping} />\n                <Route path=\"/category\" component={category_component} />\n                <Route path=\"/clients\" component={client_component} />\n                <Route path=\"/employees\" component={employee} />\n              </Switch>\n            </ResponsiveDrawer>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}